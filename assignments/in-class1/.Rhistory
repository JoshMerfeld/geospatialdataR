colnames(bbox) <- c(id", "lon", "lat")
colnames(bbox) <- c("id", "lon", "lat")
bbox
# check whether bbox overlaps with kenya
links <- paste0("/vsicurl/", it_obj$features[[1]]$assets$red$href)
bbox <- st_as_sf(st_as_sfc(st_bbox(c(xmin = it_obj$features[[1]]$bbox[1],
ymin = it_obj$features[[1]]$bbox[2],
xmax = it_obj$features[[1]]$bbox[3],
ymax = it_obj$features[[1]]$bbox[4]),
crs = st_crs(4326))))
for (i in 2:length(it_obj$features)) {
temp <- st_as_sfc(st_bbox(c(xmin = it_obj$features[[i]]$bbox[1],
ymin = it_obj$features[[i]]$bbox[2],
xmax = it_obj$features[[i]]$bbox[3],
ymax = it_obj$features[[i]]$bbox[4]),
crs = st_crs(4326)))
bbox <- bind_rows(bbox, st_as_sf(temp))
links <- c(links, paste0("/vsicurl/", it_obj$features[[i]]$assets$red$href))
}
bbox$id <- 1:nrow(bbox)
bbox
bbox$geometry
# set geometry as column x
bbox <- st_set_geometry(bbox, "x")
bbox
colnames(bbox)
# check whether bbox overlaps with kenya
links <- paste0("/vsicurl/", it_obj$features[[1]]$assets$red$href)
bbox <- st_as_sf(st_as_sfc(st_bbox(c(xmin = it_obj$features[[1]]$bbox[1],
ymin = it_obj$features[[1]]$bbox[2],
xmax = it_obj$features[[1]]$bbox[3],
ymax = it_obj$features[[1]]$bbox[4]),
crs = st_crs(4326))))
for (i in 2:length(it_obj$features)) {
temp <- st_as_sfc(st_bbox(c(xmin = it_obj$features[[i]]$bbox[1],
ymin = it_obj$features[[i]]$bbox[2],
xmax = it_obj$features[[i]]$bbox[3],
ymax = it_obj$features[[i]]$bbox[4]),
crs = st_crs(4326)))
bbox <- bind_rows(bbox, st_as_sf(temp))
links <- c(links, paste0("/vsicurl/", it_obj$features[[i]]$assets$red$href))
}
# set geometry as column x
bbox <- st_set_geometry(bbox, "x")
bbox
# set geometry as column x
bbox <- st_set_geometry(bbox, "x")
bbox
colnames(bbox)
colnames(bbox) <- c("geometry")
bbox
bbox <- st_set_geometry(bbox, "geometry")
bbox
bbox$id <- 1:nrow(bbox)
bbox$
bbox
# get coordinates of centroid
bbox$centroid <- st_centroid(bbox)
bbox$centroid <- st_coordinates(bbox$centroid)
bbox
colnames(bbox)
bbox$centroid
bbox$centroid[1]
bbox$centroid[[1]]
bbox$centroid$X
dim(bbox$centroid)
names(bbox$centroid)
colnames(bbox$centroid)
bbox$centroid[["X"]]
bbox$centroid$X
bbox$centroid$centroid.X
bbox |> arrange(centroid)
bbox <- bbox |>
arrange(centroid)
# download one raster
r <- rast(links[[1]])
# reorder links
links <- links[bbox$id]
links
bbox$id
# reorder links
links <- links[bbox$id]
# download one raster
r <- rast(links[[1]])
count <- 1
for (i in links[1:length(links)]){
tempr <- rast(i)
r <- mosaic(r, tempr, fun = "min")
print(count/length(links))
count <- count + 1
}
library(knitr)
library(sf)
library(sp)
library(tidyverse)
library(gganimate)
library(transformr)
library(gifski)
library(ggthemes)
library(scales)
library(RColorBrewer)
library(kableExtra)
library(ggpubr)
library(rticles)
library(stats)
library(broom)
library(extrafont)
library(fixest)
library(modelsummary)
library(openxlsx)
library(raster)
library(lubridate)
library(png)
library(cowplot)
library(did2s)
library(haven)
library(parallel)
library(magick)
theme_set(theme_bw())
loadfonts()  # Must be run once in each session (markdown is a new "session" each time you render/knit)
# Functions to change format of numbers
reportP <- function(pValue){
if (pValue < 0.001){
result <- "p < 0.001"
} else {
result <- sprintf("p = %.3f", pValue) # inserts a float into a string and simultaneously do rounding
}
return(result)
}
reportDec <- function(dec){
result <- sprintf("%.3f", dec) # inserts a float into a string and simultaneously do rounding
return(result)
}
reportPercent <- function(dec){
result <- sprintf("%.1f", 100*dec) # inserts a float into a string and simultaneously do rounding
return(result)
}
commaNum <- function(large){
result <- formatC(large, big.mark = ",", format = "f", digits = 0)
return(result)
}
# Let's create some data for Kabani
kabani <- as_tibble(matrix(NA, nrow = 24, ncol = 1))
colnames(kabani) <- c("date")
kabani$date <- seq.Date(from = as.Date("2022-05-01"), by = "month", length.out = 24)
kabani$povertyline <- 1.9
kabani$meanincome <- c(rep(1.69, 12), rep(1.83, 12))
kabani$income <- c(1.31, 0.79, 2.47, 1.22, 1.69, 1.45, 1.41, 1.05, 4.01, 0.91, 0.96,
2.94, 2.15, 2.06, 1.18, 1.21, 1.73, 3.29, 2.29, 1.27, 1.89, 1.66, 1.39, 1.79)
kabani$poorannual <- "Poor"
kabani$poorx <- 0.5
kabani$poormonthly <- "Poor"
kabani$poormonthly[kabani$income>=kabani$povertyline] <- "Not poor"
kabani2 <- kabani %>%
mutate(datex = date) %>%
dplyr::select(-date)
kabani2$income <- kabani2$income + 0.25
kabani2$income[kabani2$poormonthly=="Poor"] <- kabani2$income[kabani2$poormonthly=="Poor"] - 0.5
# NOTE THE ABSOLUTE PATH!
# bad practice, but I don't want to make this data availalble on Github yet.
icrisat <- read_dta("/Users/Josh/Dropbox/Papers/merfeldmorduch2/data/icrisat/icrisat.dta")
annualmean <- weighted.mean(icrisat$in_poverty_wave, icrisat$weight)
monthlymean <- weighted.mean(icrisat$in_poverty, icrisat$weight)
temp <- icrisat
# wrapper <- function(i){
#   set.seed(23405 + i)
#   temp$random <- runif(nrow(temp))
#   return <- c(temp %>%
#     group_by(hhid, year) %>%
#     arrange(hhid, year, random) %>%
#     filter(row_number()==1) %>%
#     ungroup() %>%
#     summarize(in_poverty = weighted.mean(in_poverty, weight)) %>%
#     pull(in_poverty))
# }
# results <- mclapply(1:10000, wrapper)
# # saving so I don't have to run this every time I want to knit
# saveRDS(results, "results.rds")
results <- readRDS("results.rds")
results <- unlist(results)
results <- as_tibble(results)
colnames(results) <- "results"
results$sim <- 1:nrow(results)
results$temp <- 1
ggplot(results) +
geom_histogram(aes(x = results, y = after_stat(count / sum(count))), color = "transparent") +
geom_vline(xintercept = monthlymean, color = "#777d78", linetype = "dashed") +
geom_vline(xintercept = annualmean, color = "#340063", linetype = "dashed") +
labs(x = "Mean", y = "Count") +
scale_x_continuous(breaks = seq(from = 0.28, to = 0.42, by = 0.02), limits = c(0.28, 0.42)) +
scale_y_continuous(breaks = seq(from = 0, to = 50, by = 10), limits = c(0, 50)) +
annotate("text", label = "Annual mean\n(low-frequency mean)", x = annualmean, y = 10, color = "#340063") +
annotate("text", label = "Monthly mean\n(high-frequency mean)", x = monthlymean, y = 10, color = "#777d78") +
transition_states(temp)
results
nrow(results)
ggplot(results) +
geom_histogram(aes(x = results, y = after_stat(count / sum(count))), color = "transparent", fill = "transparent") +
geom_vline(xintercept = monthlymean, color = "#777d78", linetype = "dashed") +
geom_vline(xintercept = annualmean, color = "#340063", linetype = "dashed") +
labs(x = "Mean", y = "Count") +
scale_x_continuous(breaks = seq(from = 0.28, to = 0.42, by = 0.02), limits = c(0.28, 0.42)) +
scale_y_continuous(breaks = seq(from = 0, to = 50, by = 10), limits = c(0, 50)) +
annotate("text", label = "Annual mean\n(low-frequency mean)", x = annualmean, y = 10, color = "#340063") +
annotate("text", label = "Monthly mean\n(high-frequency mean)", x = monthlymean, y = 10, color = "#777d78") +
transition_states(temp)
ggplot(results %>% filter(hist<=1000)) +
geom_histogram(aes(x = results, y = after_stat(count / sum(count))), color = "transparent", fill = "transparent") +
geom_vline(xintercept = monthlymean, color = "#777d78", linetype = "dashed") +
geom_vline(xintercept = annualmean, color = "#340063", linetype = "dashed") +
labs(x = "Mean", y = "Count") +
scale_x_continuous(breaks = seq(from = 0.28, to = 0.42, by = 0.02), limits = c(0.28, 0.42)) +
scale_y_continuous(breaks = seq(from = 0, to = 50, by = 10), limits = c(0, 50)) +
annotate("text", label = "Annual mean\n(low-frequency mean)", x = annualmean, y = 10, color = "#340063") +
annotate("text", label = "Monthly mean\n(high-frequency mean)", x = monthlymean, y = 10, color = "#777d78") +
transition_states(temp)
ggplot(results %>% filter(sim<=1000)) +
geom_histogram(aes(x = results, y = after_stat(count / sum(count))), color = "transparent", fill = "transparent") +
geom_vline(xintercept = monthlymean, color = "#777d78", linetype = "dashed") +
geom_vline(xintercept = annualmean, color = "#340063", linetype = "dashed") +
labs(x = "Mean", y = "Count") +
scale_x_continuous(breaks = seq(from = 0.28, to = 0.42, by = 0.02), limits = c(0.28, 0.42)) +
scale_y_continuous(breaks = seq(from = 0, to = 50, by = 10), limits = c(0, 50)) +
annotate("text", label = "Annual mean\n(low-frequency mean)", x = annualmean, y = 10, color = "#340063") +
annotate("text", label = "Monthly mean\n(high-frequency mean)", x = monthlymean, y = 10, color = "#777d78") +
transition_states(temp)
annualmean <- weighted.mean(icrisat$in_poverty_wave, icrisat$weight)
monthlymean <- weighted.mean(icrisat$in_poverty, icrisat$weight)
temp <- icrisat
# wrapper <- function(i){
#   set.seed(23405 + i)
#   temp$random <- runif(nrow(temp))
#   return <- c(temp %>%
#     group_by(hhid, year) %>%
#     arrange(hhid, year, random) %>%
#     filter(row_number()==1) %>%
#     ungroup() %>%
#     summarize(in_poverty = weighted.mean(in_poverty, weight)) %>%
#     pull(in_poverty))
# }
# results <- mclapply(1:10000, wrapper)
# # saving so I don't have to run this every time I want to knit
# saveRDS(results, "results.rds")
results <- readRDS("results.rds")
results <- unlist(results)
results <- as_tibble(results)
colnames(results) <- "results"
results$sim <- 1:nrow(results)
results$temp <- 1
results
annualmean <- weighted.mean(icrisat$in_poverty_wave, icrisat$weight)
monthlymean <- weighted.mean(icrisat$in_poverty, icrisat$weight)
temp <- icrisat
# wrapper <- function(i){
#   set.seed(23405 + i)
#   temp$random <- runif(nrow(temp))
#   return <- c(temp %>%
#     group_by(hhid, year) %>%
#     arrange(hhid, year, random) %>%
#     filter(row_number()==1) %>%
#     ungroup() %>%
#     summarize(in_poverty = weighted.mean(in_poverty, weight)) %>%
#     pull(in_poverty))
# }
# results <- mclapply(1:10000, wrapper)
# # saving so I don't have to run this every time I want to knit
# saveRDS(results, "results.rds")
results <- readRDS("results.rds")
results <- unlist(results)
results <- as_tibble(results)
colnames(results) <- "results"
results$sim <- 1:nrow(results)
temp <- c()
for (i in 1:1000){
temp <- rbind(temp, cbind(results[1:i,], hist = i))
}
temp
temp <- as_tibble(temp)
summary(temp |> filter(hist<=1000))
ggplot(temp %>% filter(hist<=1000)) +
geom_histogram(aes(x = results), color = "#006334", binwidth = 0.0005) +
geom_vline(xintercept = monthlymean, color = "#777d78", linetype = "dashed") +
geom_vline(xintercept = annualmean, color = "#340063", linetype = "dashed") +
labs(x = "Mean", y = "Count") +
scale_x_continuous(breaks = seq(from = 0.28, to = 0.42, by = 0.02), limits = c(0.28, 0.42)) +
annotate("text", label = "Annual mean\n(low-frequency mean)", x = annualmean, y = 10, color = "#340063") +
annotate("text", label = "Monthly mean\n(high-frequency mean)", x = monthlymean, y = 10, color = "#777d78") +
transition_states(hist, state_length = 1, transition_length = 2)
annualmean <- weighted.mean(icrisat$in_poverty_wave, icrisat$weight)
monthlymean <- weighted.mean(icrisat$in_poverty, icrisat$weight)
temp <- icrisat
# wrapper <- function(i){
#   set.seed(23405 + i)
#   temp$random <- runif(nrow(temp))
#   return <- c(temp %>%
#     group_by(hhid, year) %>%
#     arrange(hhid, year, random) %>%
#     filter(row_number()==1) %>%
#     ungroup() %>%
#     summarize(in_poverty = weighted.mean(in_poverty, weight)) %>%
#     pull(in_poverty))
# }
# results <- mclapply(1:10000, wrapper)
# # saving so I don't have to run this every time I want to knit
# saveRDS(results, "results.rds")
results <- readRDS("results.rds")
results <- unlist(results)
results <- as_tibble(results)
colnames(results) <- "results"
results$sim <- 1:nrow(results)
temp <- c()
for (i in 1:1000){
temp <- rbind(temp, cbind(results[1:i,], hist = i))
}
temp <- as_tibble(temp)
ggplot(temp %>% filter(hist %in% c(999, 1000))) +
geom_histogram(aes(x = results, y = after_stat(count / sum(count))), color = "transparent", fill = "transparent") +
geom_vline(xintercept = monthlymean, color = "#777d78", linetype = "dashed") +
geom_vline(xintercept = annualmean, color = "#340063", linetype = "dashed") +
labs(x = "Mean", y = "Count") +
scale_x_continuous(breaks = seq(from = 0.28, to = 0.42, by = 0.02), limits = c(0.28, 0.42)) +
scale_y_continuous(breaks = seq(from = 0, to = 50, by = 10), limits = c(0, 50)) +
annotate("text", label = "Annual mean\n(low-frequency mean)", x = annualmean, y = 10, color = "#340063") +
annotate("text", label = "Monthly mean\n(high-frequency mean)", x = monthlymean, y = 10, color = "#777d78") +
transition_states(hist, state_length = 1, transition_length = 2)
ggplot(temp %>% filter(hist %in% c(999, 1000))) +
geom_histogram(aes(x = results)), color = "transparent", fill = "transparent") +
ggplot(temp %>% filter(hist %in% c(999, 1000))) +
geom_histogram(aes(x = results)), color = "transparent", fill = "transparent") +
ggplot(temp %>% filter(hist %in% c(999, 1000))) +
geom_histogram(aes(x = results), color = "transparent", fill = "transparent") +
geom_vline(xintercept = monthlymean, color = "#777d78", linetype = "dashed") +
geom_vline(xintercept = annualmean, color = "#340063", linetype = "dashed") +
labs(x = "Mean", y = "Count") +
scale_x_continuous(breaks = seq(from = 0.28, to = 0.42, by = 0.02), limits = c(0.28, 0.42)) +
scale_y_continuous(breaks = seq(from = 0, to = 50, by = 10), limits = c(0, 50)) +
annotate("text", label = "Annual mean\n(low-frequency mean)", x = annualmean, y = 10, color = "#340063") +
annotate("text", label = "Monthly mean\n(high-frequency mean)", x = monthlymean, y = 10, color = "#777d78") +
transition_states(hist, state_length = 1, transition_length = 2)
ggplot(temp %>% filter(hist %in% c(999, 1000))) +
geom_histogram(aes(x = results), color = "transparent") +
geom_vline(xintercept = monthlymean, color = "#777d78", linetype = "dashed") +
geom_vline(xintercept = annualmean, color = "#340063", linetype = "dashed") +
labs(x = "Mean", y = "Count") +
scale_x_continuous(breaks = seq(from = 0.28, to = 0.42, by = 0.02), limits = c(0.28, 0.42)) +
scale_y_continuous(breaks = seq(from = 0, to = 50, by = 10), limits = c(0, 50)) +
annotate("text", label = "Annual mean\n(low-frequency mean)", x = annualmean, y = 10, color = "#340063") +
annotate("text", label = "Monthly mean\n(high-frequency mean)", x = monthlymean, y = 10, color = "#777d78") +
transition_states(hist, state_length = 1, transition_length = 2)
temp
library(haven)
temp <- read_sav("/Users/Josh/Dropbox/Papers/malawiimagery/data/mics/Malawi MICS6 SPSS Datasets/hl.sav")
View(temp)
knitr::opts_chunk$set(echo = FALSE, dev = "png") # NOTE: switched to png instead of pdf to decrease size of the resulting pdf
def.chunk.hook  <- knitr::knit_hooks$get("chunk")
knitr::knit_hooks$set(chunk = function(x, options) {
x <- def.chunk.hook(x, options)
#ifelse(options$size != "a", paste0("\n \\", "tiny","\n\n", x, "\n\n \\normalsize"), x)
ifelse(options$size != "normalsize", paste0("\n \\", options$size,"\n\n", x, "\n\n \\normalsize"), x)
})
library(tidyverse)
library(kableExtra)
library(fixest)
library(ggpubr)
library(RColorBrewer)
library(haven)
library(mfx)
library(nnet)
library(survival)
library(survminer)
df <- read_dta("week3files/data.dta")
data(iris)
multinomresults <- multinom(Species ~ Sepal.Length + Sepal.Width + Petal.Length + Petal.Width, data = iris)
library(survminer)
KM <- survfit(Surv(time = time, event = status) ~ 1, data = diabetic)
ggsurvplot(KM) +
labs(y = "Survival probability", x = "Time (months)") +
theme(plot.background = element_rect(fill = "#f0f1eb", color = "#f0f1eb"))
ggsurvplot(KM) +
labs(y = "Survival probability", x = "Time (months)")
ggsurvplot(KM)$plot +
labs(y = "Survival probability", x = "Time (months)") +
scale_color_discrete("Treatment:", labels = c("No", "Yes")) +
theme(legend.position = c(0.1, 0.2)) +
theme(plot.background = element_rect(fill = "#f0f1eb", color = "#f0f1eb"))
KM <- survfit(Surv(time = time, event = status) ~ 1, data = diabetic)
ggsurvplot(KM)$plot +
labs(y = "Survival probability", x = "Time (months)") +
theme(plot.background = element_rect(fill = "#f0f1eb", color = "#f0f1eb"))
# cleaning data for assignment 1
library(tidyterra)
library(tidyverse)
library(terra)
# load geojson of dongs (file now deleted)
dong <- vect("/Users/Josh/Downloads/skorea-submunicipalities-2018-geo.json")
# load geojson of provinces
do <- vect("/Users/Josh/Downloads/skorea-provinces-2018-geo.json")
do <- do |> filter(name_eng=="Seoul")
# intersect
dong <- intersect(dong, do)
dong
plot(dong)
do
do <- do |> dplyr::select(-c(name))
# cleaning data for assignment 1
library(tidyterra)
library(tidyverse)
library(terra)
# load geojson of dongs (file now deleted)
dong <- vect("/Users/Josh/Downloads/skorea-submunicipalities-2018-geo.json")
dong <- dong |> dplyr::select(-c(name))
# load geojson of provinces
do <- vect("/Users/Josh/Downloads/skorea-provinces-2018-geo.json")
do <- do |> filter(name_eng=="Seoul")
do <- do |> dplyr::select(-c(name))
# intersect
dong <- intersect(dong, do)
dong
plot(dong)
# save
write_vect(dong, "data/dong.shp")
# save
writeVector(dong, "data/dong.shp")
getwd()
setwd("~/Dropbox/KDIS/Classes/geospatialdataR/assignments/in-class1")
# save
writeVector(dong, "data/dong.shp")
# load geojson of dongs (file now deleted)
dong <- vect("/Users/Josh/Downloads/skorea-submunicipalities-2018-geo.json")
dong <- dong |> dplyr::select(-c(name))
dong
dong <- vect("/Users/Josh/Downloads/skorea-submunicipalities-2018-geo.json")
dong <- dong |> dplyr::select(-c(name, base_year))
dong <- dong |> rename(dong = name_eng)
# load geojson of provinces
do <- vect("/Users/Josh/Downloads/skorea-provinces-2018-geo.json")
do <- do |> filter(name_eng=="Seoul")
do
# load geojson of dongs (file now deleted)
dong <- vect("/Users/Josh/Downloads/skorea-submunicipalities-2018-geo.json")
dong <- dong |> dplyr::select(name_eng)
dong <- dong |> dplyr::select(dong = name_eng)
# load geojson of provinces
do <- vect("/Users/Josh/Downloads/skorea-provinces-2018-geo.json")
do <- do |> filter(name_eng=="Seoul")
do <- do |> dplyr::select(province = name_eng)
# intersect
dong <- intersect(dong, do)
# save
writeVector(dong, "data/dong.shp", overwrite = TRUE)
# Load hospitals
rail <- vect("/Users/Josh/Downloads/south-korea-latest-free.shp/gis_osm_railways_free_1.shp")
rail
plot(rail)
# Load hospitals
rail <- vect("/Users/Josh/Downloads/south-korea-latest-free.shp/gis_osm_transport_free_1.shp")
rail
table(rail$flcass)
table(rail$fclass)
rail <- rail |> filter(fclass=="railway_station")
rail <- intersect(rail, do)
plot(rail)
?rast
temp <- vect("/Users/Josh/Dropbox/KDIS/Classes/geospatialdataR/week4files/kgrid.shp")
temp
dong <- project(dong, crs(temp))
do <- project(do, crs(temp))
# create grid
grid <- rast(do, res=500)
grid
plot(grid)
# create grid
grid <- rast(do, res=100)
grid
plot(grid)
grid <- as.polygons(grid)
grid
plot(grid)
grid$id <- 1:nrow(grid)
grid <- intersect(grid, do)
grid <- aggregate(grid, "id")
grid
plot(grid)
writeVector(grid, "data/seoulgrid.shp", overwrite = TRUE)
# Load subway stations and bus stops
transport <- vect("/Users/Josh/Downloads/south-korea-latest-free.shp/gis_osm_transport_free_1.shp")
table(transport$fclass)
plot(transport |> filter(fclass=="bus_station"))
# Load rail stations
transport <- vect("/Users/Josh/Downloads/south-korea-latest-free.shp/gis_osm_transport_free_1.shp")
transport <- transport |> filter(fclass=="railway_station")
transport <- intersect(rail, do)
transport
# Load rail stations
transport <- vect("/Users/Josh/Downloads/south-korea-latest-free.shp/gis_osm_transport_free_1.shp")
transport <- transport |> filter(fclass=="railway_station")
transport <- project(transport, crs(temp))
transport <- intersect(transport, do)
transport
plot(transport)
transport <- project(transport, "EPSG:4326")
writeVector(transport, "data/seoulrail.shp", overwrite = TRUE)
plot(transport)
# points of interest
points <- vect("/Users/Josh/Downloads/south-korea-latest-free.shp/gis_osm_pois_a_free_1.shp")
points
table(points$fclass)
points <- points |> filter(fclass %in% c("hospital", "supermarket", "school"))
points
grep("초등학교", points$fclass)
grep("초등학교", points$fclass)
grep("초등학교", points$name)
