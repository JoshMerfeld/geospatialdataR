for (i in links[1:length(links)]){
tempr <- rast(i)
r <- mosaic(r, tempr, fun = "min")
print(count/length(links))
count <- count + 1
}
library(knitr)
library(sf)
library(sp)
library(tidyverse)
library(gganimate)
library(transformr)
library(gifski)
library(ggthemes)
library(scales)
library(RColorBrewer)
library(kableExtra)
library(ggpubr)
library(rticles)
library(stats)
library(broom)
library(extrafont)
library(fixest)
library(modelsummary)
library(openxlsx)
library(raster)
library(lubridate)
library(png)
library(cowplot)
library(did2s)
library(haven)
library(parallel)
library(magick)
theme_set(theme_bw())
loadfonts()  # Must be run once in each session (markdown is a new "session" each time you render/knit)
# Functions to change format of numbers
reportP <- function(pValue){
if (pValue < 0.001){
result <- "p < 0.001"
} else {
result <- sprintf("p = %.3f", pValue) # inserts a float into a string and simultaneously do rounding
}
return(result)
}
reportDec <- function(dec){
result <- sprintf("%.3f", dec) # inserts a float into a string and simultaneously do rounding
return(result)
}
reportPercent <- function(dec){
result <- sprintf("%.1f", 100*dec) # inserts a float into a string and simultaneously do rounding
return(result)
}
commaNum <- function(large){
result <- formatC(large, big.mark = ",", format = "f", digits = 0)
return(result)
}
# Let's create some data for Kabani
kabani <- as_tibble(matrix(NA, nrow = 24, ncol = 1))
colnames(kabani) <- c("date")
kabani$date <- seq.Date(from = as.Date("2022-05-01"), by = "month", length.out = 24)
kabani$povertyline <- 1.9
kabani$meanincome <- c(rep(1.69, 12), rep(1.83, 12))
kabani$income <- c(1.31, 0.79, 2.47, 1.22, 1.69, 1.45, 1.41, 1.05, 4.01, 0.91, 0.96,
2.94, 2.15, 2.06, 1.18, 1.21, 1.73, 3.29, 2.29, 1.27, 1.89, 1.66, 1.39, 1.79)
kabani$poorannual <- "Poor"
kabani$poorx <- 0.5
kabani$poormonthly <- "Poor"
kabani$poormonthly[kabani$income>=kabani$povertyline] <- "Not poor"
kabani2 <- kabani %>%
mutate(datex = date) %>%
dplyr::select(-date)
kabani2$income <- kabani2$income + 0.25
kabani2$income[kabani2$poormonthly=="Poor"] <- kabani2$income[kabani2$poormonthly=="Poor"] - 0.5
# NOTE THE ABSOLUTE PATH!
# bad practice, but I don't want to make this data availalble on Github yet.
icrisat <- read_dta("/Users/Josh/Dropbox/Papers/merfeldmorduch2/data/icrisat/icrisat.dta")
annualmean <- weighted.mean(icrisat$in_poverty_wave, icrisat$weight)
monthlymean <- weighted.mean(icrisat$in_poverty, icrisat$weight)
temp <- icrisat
# wrapper <- function(i){
#   set.seed(23405 + i)
#   temp$random <- runif(nrow(temp))
#   return <- c(temp %>%
#     group_by(hhid, year) %>%
#     arrange(hhid, year, random) %>%
#     filter(row_number()==1) %>%
#     ungroup() %>%
#     summarize(in_poverty = weighted.mean(in_poverty, weight)) %>%
#     pull(in_poverty))
# }
# results <- mclapply(1:10000, wrapper)
# # saving so I don't have to run this every time I want to knit
# saveRDS(results, "results.rds")
results <- readRDS("results.rds")
results <- unlist(results)
results <- as_tibble(results)
colnames(results) <- "results"
results$sim <- 1:nrow(results)
results$temp <- 1
ggplot(results) +
geom_histogram(aes(x = results, y = after_stat(count / sum(count))), color = "transparent") +
geom_vline(xintercept = monthlymean, color = "#777d78", linetype = "dashed") +
geom_vline(xintercept = annualmean, color = "#340063", linetype = "dashed") +
labs(x = "Mean", y = "Count") +
scale_x_continuous(breaks = seq(from = 0.28, to = 0.42, by = 0.02), limits = c(0.28, 0.42)) +
scale_y_continuous(breaks = seq(from = 0, to = 50, by = 10), limits = c(0, 50)) +
annotate("text", label = "Annual mean\n(low-frequency mean)", x = annualmean, y = 10, color = "#340063") +
annotate("text", label = "Monthly mean\n(high-frequency mean)", x = monthlymean, y = 10, color = "#777d78") +
transition_states(temp)
results
nrow(results)
ggplot(results) +
geom_histogram(aes(x = results, y = after_stat(count / sum(count))), color = "transparent", fill = "transparent") +
geom_vline(xintercept = monthlymean, color = "#777d78", linetype = "dashed") +
geom_vline(xintercept = annualmean, color = "#340063", linetype = "dashed") +
labs(x = "Mean", y = "Count") +
scale_x_continuous(breaks = seq(from = 0.28, to = 0.42, by = 0.02), limits = c(0.28, 0.42)) +
scale_y_continuous(breaks = seq(from = 0, to = 50, by = 10), limits = c(0, 50)) +
annotate("text", label = "Annual mean\n(low-frequency mean)", x = annualmean, y = 10, color = "#340063") +
annotate("text", label = "Monthly mean\n(high-frequency mean)", x = monthlymean, y = 10, color = "#777d78") +
transition_states(temp)
ggplot(results %>% filter(hist<=1000)) +
geom_histogram(aes(x = results, y = after_stat(count / sum(count))), color = "transparent", fill = "transparent") +
geom_vline(xintercept = monthlymean, color = "#777d78", linetype = "dashed") +
geom_vline(xintercept = annualmean, color = "#340063", linetype = "dashed") +
labs(x = "Mean", y = "Count") +
scale_x_continuous(breaks = seq(from = 0.28, to = 0.42, by = 0.02), limits = c(0.28, 0.42)) +
scale_y_continuous(breaks = seq(from = 0, to = 50, by = 10), limits = c(0, 50)) +
annotate("text", label = "Annual mean\n(low-frequency mean)", x = annualmean, y = 10, color = "#340063") +
annotate("text", label = "Monthly mean\n(high-frequency mean)", x = monthlymean, y = 10, color = "#777d78") +
transition_states(temp)
ggplot(results %>% filter(sim<=1000)) +
geom_histogram(aes(x = results, y = after_stat(count / sum(count))), color = "transparent", fill = "transparent") +
geom_vline(xintercept = monthlymean, color = "#777d78", linetype = "dashed") +
geom_vline(xintercept = annualmean, color = "#340063", linetype = "dashed") +
labs(x = "Mean", y = "Count") +
scale_x_continuous(breaks = seq(from = 0.28, to = 0.42, by = 0.02), limits = c(0.28, 0.42)) +
scale_y_continuous(breaks = seq(from = 0, to = 50, by = 10), limits = c(0, 50)) +
annotate("text", label = "Annual mean\n(low-frequency mean)", x = annualmean, y = 10, color = "#340063") +
annotate("text", label = "Monthly mean\n(high-frequency mean)", x = monthlymean, y = 10, color = "#777d78") +
transition_states(temp)
annualmean <- weighted.mean(icrisat$in_poverty_wave, icrisat$weight)
monthlymean <- weighted.mean(icrisat$in_poverty, icrisat$weight)
temp <- icrisat
# wrapper <- function(i){
#   set.seed(23405 + i)
#   temp$random <- runif(nrow(temp))
#   return <- c(temp %>%
#     group_by(hhid, year) %>%
#     arrange(hhid, year, random) %>%
#     filter(row_number()==1) %>%
#     ungroup() %>%
#     summarize(in_poverty = weighted.mean(in_poverty, weight)) %>%
#     pull(in_poverty))
# }
# results <- mclapply(1:10000, wrapper)
# # saving so I don't have to run this every time I want to knit
# saveRDS(results, "results.rds")
results <- readRDS("results.rds")
results <- unlist(results)
results <- as_tibble(results)
colnames(results) <- "results"
results$sim <- 1:nrow(results)
results$temp <- 1
results
annualmean <- weighted.mean(icrisat$in_poverty_wave, icrisat$weight)
monthlymean <- weighted.mean(icrisat$in_poverty, icrisat$weight)
temp <- icrisat
# wrapper <- function(i){
#   set.seed(23405 + i)
#   temp$random <- runif(nrow(temp))
#   return <- c(temp %>%
#     group_by(hhid, year) %>%
#     arrange(hhid, year, random) %>%
#     filter(row_number()==1) %>%
#     ungroup() %>%
#     summarize(in_poverty = weighted.mean(in_poverty, weight)) %>%
#     pull(in_poverty))
# }
# results <- mclapply(1:10000, wrapper)
# # saving so I don't have to run this every time I want to knit
# saveRDS(results, "results.rds")
results <- readRDS("results.rds")
results <- unlist(results)
results <- as_tibble(results)
colnames(results) <- "results"
results$sim <- 1:nrow(results)
temp <- c()
for (i in 1:1000){
temp <- rbind(temp, cbind(results[1:i,], hist = i))
}
temp
temp <- as_tibble(temp)
summary(temp |> filter(hist<=1000))
ggplot(temp %>% filter(hist<=1000)) +
geom_histogram(aes(x = results), color = "#006334", binwidth = 0.0005) +
geom_vline(xintercept = monthlymean, color = "#777d78", linetype = "dashed") +
geom_vline(xintercept = annualmean, color = "#340063", linetype = "dashed") +
labs(x = "Mean", y = "Count") +
scale_x_continuous(breaks = seq(from = 0.28, to = 0.42, by = 0.02), limits = c(0.28, 0.42)) +
annotate("text", label = "Annual mean\n(low-frequency mean)", x = annualmean, y = 10, color = "#340063") +
annotate("text", label = "Monthly mean\n(high-frequency mean)", x = monthlymean, y = 10, color = "#777d78") +
transition_states(hist, state_length = 1, transition_length = 2)
annualmean <- weighted.mean(icrisat$in_poverty_wave, icrisat$weight)
monthlymean <- weighted.mean(icrisat$in_poverty, icrisat$weight)
temp <- icrisat
# wrapper <- function(i){
#   set.seed(23405 + i)
#   temp$random <- runif(nrow(temp))
#   return <- c(temp %>%
#     group_by(hhid, year) %>%
#     arrange(hhid, year, random) %>%
#     filter(row_number()==1) %>%
#     ungroup() %>%
#     summarize(in_poverty = weighted.mean(in_poverty, weight)) %>%
#     pull(in_poverty))
# }
# results <- mclapply(1:10000, wrapper)
# # saving so I don't have to run this every time I want to knit
# saveRDS(results, "results.rds")
results <- readRDS("results.rds")
results <- unlist(results)
results <- as_tibble(results)
colnames(results) <- "results"
results$sim <- 1:nrow(results)
temp <- c()
for (i in 1:1000){
temp <- rbind(temp, cbind(results[1:i,], hist = i))
}
temp <- as_tibble(temp)
ggplot(temp %>% filter(hist %in% c(999, 1000))) +
geom_histogram(aes(x = results, y = after_stat(count / sum(count))), color = "transparent", fill = "transparent") +
geom_vline(xintercept = monthlymean, color = "#777d78", linetype = "dashed") +
geom_vline(xintercept = annualmean, color = "#340063", linetype = "dashed") +
labs(x = "Mean", y = "Count") +
scale_x_continuous(breaks = seq(from = 0.28, to = 0.42, by = 0.02), limits = c(0.28, 0.42)) +
scale_y_continuous(breaks = seq(from = 0, to = 50, by = 10), limits = c(0, 50)) +
annotate("text", label = "Annual mean\n(low-frequency mean)", x = annualmean, y = 10, color = "#340063") +
annotate("text", label = "Monthly mean\n(high-frequency mean)", x = monthlymean, y = 10, color = "#777d78") +
transition_states(hist, state_length = 1, transition_length = 2)
ggplot(temp %>% filter(hist %in% c(999, 1000))) +
geom_histogram(aes(x = results)), color = "transparent", fill = "transparent") +
ggplot(temp %>% filter(hist %in% c(999, 1000))) +
geom_histogram(aes(x = results)), color = "transparent", fill = "transparent") +
ggplot(temp %>% filter(hist %in% c(999, 1000))) +
geom_histogram(aes(x = results), color = "transparent", fill = "transparent") +
geom_vline(xintercept = monthlymean, color = "#777d78", linetype = "dashed") +
geom_vline(xintercept = annualmean, color = "#340063", linetype = "dashed") +
labs(x = "Mean", y = "Count") +
scale_x_continuous(breaks = seq(from = 0.28, to = 0.42, by = 0.02), limits = c(0.28, 0.42)) +
scale_y_continuous(breaks = seq(from = 0, to = 50, by = 10), limits = c(0, 50)) +
annotate("text", label = "Annual mean\n(low-frequency mean)", x = annualmean, y = 10, color = "#340063") +
annotate("text", label = "Monthly mean\n(high-frequency mean)", x = monthlymean, y = 10, color = "#777d78") +
transition_states(hist, state_length = 1, transition_length = 2)
ggplot(temp %>% filter(hist %in% c(999, 1000))) +
geom_histogram(aes(x = results), color = "transparent") +
geom_vline(xintercept = monthlymean, color = "#777d78", linetype = "dashed") +
geom_vline(xintercept = annualmean, color = "#340063", linetype = "dashed") +
labs(x = "Mean", y = "Count") +
scale_x_continuous(breaks = seq(from = 0.28, to = 0.42, by = 0.02), limits = c(0.28, 0.42)) +
scale_y_continuous(breaks = seq(from = 0, to = 50, by = 10), limits = c(0, 50)) +
annotate("text", label = "Annual mean\n(low-frequency mean)", x = annualmean, y = 10, color = "#340063") +
annotate("text", label = "Monthly mean\n(high-frequency mean)", x = monthlymean, y = 10, color = "#777d78") +
transition_states(hist, state_length = 1, transition_length = 2)
temp
library(haven)
temp <- read_sav("/Users/Josh/Dropbox/Papers/malawiimagery/data/mics/Malawi MICS6 SPSS Datasets/hl.sav")
View(temp)
knitr::opts_chunk$set(echo = FALSE, dev = "png") # NOTE: switched to png instead of pdf to decrease size of the resulting pdf
def.chunk.hook  <- knitr::knit_hooks$get("chunk")
knitr::knit_hooks$set(chunk = function(x, options) {
x <- def.chunk.hook(x, options)
#ifelse(options$size != "a", paste0("\n \\", "tiny","\n\n", x, "\n\n \\normalsize"), x)
ifelse(options$size != "normalsize", paste0("\n \\", options$size,"\n\n", x, "\n\n \\normalsize"), x)
})
library(tidyverse)
library(kableExtra)
library(fixest)
library(ggpubr)
library(RColorBrewer)
library(haven)
library(mfx)
library(nnet)
library(survival)
library(survminer)
df <- read_dta("week3files/data.dta")
data(iris)
multinomresults <- multinom(Species ~ Sepal.Length + Sepal.Width + Petal.Length + Petal.Width, data = iris)
library(survminer)
KM <- survfit(Surv(time = time, event = status) ~ 1, data = diabetic)
ggsurvplot(KM) +
labs(y = "Survival probability", x = "Time (months)") +
theme(plot.background = element_rect(fill = "#f0f1eb", color = "#f0f1eb"))
ggsurvplot(KM) +
labs(y = "Survival probability", x = "Time (months)")
ggsurvplot(KM)$plot +
labs(y = "Survival probability", x = "Time (months)") +
scale_color_discrete("Treatment:", labels = c("No", "Yes")) +
theme(legend.position = c(0.1, 0.2)) +
theme(plot.background = element_rect(fill = "#f0f1eb", color = "#f0f1eb"))
KM <- survfit(Surv(time = time, event = status) ~ 1, data = diabetic)
ggsurvplot(KM)$plot +
labs(y = "Survival probability", x = "Time (months)") +
theme(plot.background = element_rect(fill = "#f0f1eb", color = "#f0f1eb"))
# cleaning data for assignment 1
library(tidyterra)
library(tidyverse)
library(terra)
# load previous shapefile for projection
temp <- vect("/Users/Josh/Dropbox/KDIS/Classes/geospatialdataR/week4files/kgrid.shp")
# load geojson of provinces
do <- vect("/Users/Josh/Downloads/skorea-provinces-2018-geo.json")
do <- do |> filter(name_eng=="Seoul")
do <- do |> dplyr::select(province = name_eng)
do <- project(do, crs(temp))
# create grid
grid <- rast(do, res=100)
grid <- as.polygons(grid)
grid$id <- 1:nrow(grid)
grid <- intersect(grid, do)
grid <- aggregate(grid, "id")
writeVector(grid, "data/seoulgrid.shp", overwrite = TRUE)
setwd("~/Dropbox/KDIS/Classes/geospatialdataR/assignments/in-class1")
# cleaning data for assignment 1
library(tidyterra)
library(tidyverse)
library(terra)
# load previous shapefile for projection
temp <- vect("/Users/Josh/Dropbox/KDIS/Classes/geospatialdataR/week4files/kgrid.shp")
# load geojson of provinces
do <- vect("/Users/Josh/Downloads/skorea-provinces-2018-geo.json")
do <- do |> filter(name_eng=="Seoul")
do <- do |> dplyr::select(province = name_eng)
do <- project(do, crs(temp))
# create grid
grid <- rast(do, res=100)
grid <- as.polygons(grid)
grid$id <- 1:nrow(grid)
grid <- intersect(grid, do)
grid <- aggregate(grid, "id")
writeVector(grid, "data/seoulgrid.shp", overwrite = TRUE)
# Load rail stations
transport <- vect("/Users/Josh/Downloads/south-korea-latest-free.shp/gis_osm_transport_free_1.shp")
transport <- transport |> filter(fclass=="railway_station")
transport <- project(transport, crs(temp))
transport <- intersect(transport, do)
transport <- project(transport, "EPSG:4326")
writeVector(transport, "data/seoulrail.shp", overwrite = TRUE)
# points of interest
points <- vect("/Users/Josh/Downloads/south-korea-latest-free.shp/gis_osm_pois_a_free_1.shp")
points <- points |> filter(fclass %in% c("hospital", "supermarket", "school"))
points$name
head(points$name)
grep("초등학교", points$name)
points$fclass[grep("초등학교", points$name)] <- "elementary"
points
points$fclass[grep("초등학교", points$name)] <- "elementaryschool"
points$fclass[grep("중학교", points$name)] <- "middleschool"
points$fclass[grep("고등학교", points$name)] <- "highschool"
points
points <- points |> select(-c("osim_id", "name"))
points <- points |> select(-c("osm_id", "name"))
points
points <- project(points, crs(temp))
points <- intersect(points, do)
plot(points)
points <- project(points, "EPSG:4326")
centroids <- centroids(points)
centroids
# get lon/lat
points$lon <- coordinates(points)[,1]
coords(points)
coord(points)
geom(points)
geom(points)["x"]
geom(points)[,"x"]
# get lon/lat
points$lon <- geom(points)[,"x"]
points$lat <- geom(points)[,"y"]
# remove geometry
points <- select(points, -c("geometry"))
# remove geometry
points <- as_tibble(points)
points
write_csv(points, "data/seoulpoints.csv")
# water
water <- vect("/Users/Josh/Downloads/south-korea-latest-free.shp/gis_osm_water_a_free_1.shp")
water
water <- intersect(water, do)
water
# water
water <- vect("/Users/Josh/Downloads/south-korea-latest-free.shp/gis_osm_water_a_free_1.shp")
print(water)
plot(water)
do
plot(do)
ggplot () +
ggplot() +
geom_spatvector(data = water, fill = "blue") +
geom_spatvector(data = do)
ggplot() +
geom_spatvector(data = water, fill = "blue") +
geom_spatvector(data = do, fill = NA)
ggplot() +
geom_spatvector(data = water, fill = "blue") +
geom_spatvector(data = do, fill = NA, color = "red")
intersect(water, do)
intersect(do, water)
relate(water, do, "within")
max(relate(water, do, "within"))
water
do
# water
water <- vect("/Users/Josh/Downloads/south-korea-latest-free.shp/gis_osm_water_a_free_1.shp")
water <- project(water, crs(temp))
water
do
intersect(water, do)
water <- intersect(water, do)
water <- aggregate(water, "osm_id")
ggplot() +
geom_spatvector(data = water, fill = "blue") +
geom_spatvector(data = do, fill = NA, color =)
ggplot() +
geom_spatvector(data = water, fill = "blue") +
geom_spatvector(data = do, fill = NA)
water
writeVector(water, "data/seoulwater.shp", overwrite = TRUE)
# gu
gu <- vect("/Users/Josh/Downloads/skorea-municipalities-2018-geo.json")
gu
gu <- gu |> select("name_eng")
gu <- project(gu, crs(temp))
gu <- intersect(gu, do)
gu <- aggregate(gu, "name_eng")
writeVector(gu, "data/seoulgu.shp", overwrite = TRUE)
writeVector
ggplot() +
geom_spatvector(data = water, fill = "blue") +
geom_spatvector(data = gu, fill = NA)
# pop raster
pop <- rast("/Users/Josh/Downloads/kor_ppp_2020_constrained.tif")
pop
grid
pop <- project(pop, crs(temp))
pop
grid
# extract
grid$pop <- extract(pop, grid, fun = "sum")
sum(grid$pop)
# extract
grid$pop <- extract(pop, grid, fun = "mean")
sum(grid$pop)
extract(pop, grid, fun = "mean")
extract(grid, pop, fun = "mean")
extract(pop, grid, fun = "mean")
ggplot() + geom_spatvector(data = grid, aes(fill = pop), color = NA)
pop
extract(pop["kor_ppp_2020_constrained"], grid, fun = "mean")
# extract
grid$pop <- round(extract(pop["kor_ppp_2020_constrained"], grid, fun = "mean"), 0)
grid
summary(pop)
sum(pop)
sum(pop["sum"])
pop[1]
pop[,1]
head(pop[,1])
summary(pop[,1])
grid
pop
pop <- intersect(pop, do)
pop
# pop raster
pop <- rast("/Users/Josh/Downloads/kor_ppp_2020_constrained.tif")
pop <- project(pop, crs(temp))
# extract
grid$pop <- round(extract(pop["kor_ppp_2020_constrained"], grid, fun = "mean", method = "bilinear", ID = FALSE), 0)
grid
summary(grid)
sum(grid$pop)
sum(grid$pop, na.rm = TRUE)
# extract
grid$pop <- round(extract(pop["kor_ppp_2020_constrained"], grid, fun = "sum", method = "bilinear", ID = FALSE), 0)
sum(grid$pop, na.rm = TRUE)
grid
grid <- grid |> select(-c(agg_n))
writeVector(grid, "data/seoulgrid.shp", overwrite = TRUE)
grid
grid$pop[is.na(grid$pop)] <- 0
grid
ggplot() + geom_spatvector(data = grid, aes(fill = pop), color = NA)
ggplot() + geom_spatvector(data = grid, aes(fill = log(pop)), color = NA)
ggplot() + geom_spatvector(data = grid, aes(fill = log(pop)), color = NA) + scale_fill_distiller(palette = "Spectral")
# extract
grid$pop <- round(extract(pop["kor_ppp_2020_constrained"], grid, fun = "mean", method = "bilinear", ID = FALSE), 0)
grid <- grid |> select(-c(agg_n))
grid
grid$pop[is.na(grid$pop)] <- 0
ggplot() + geom_spatvector(data = grid, aes(fill = log(pop)), color = NA) + scale_fill_distiller(palette = "Spectral")
ggplot() + geom_spatvector(data = grid, aes(fill = (pop)), color = NA) + scale_fill_distiller(palette = "Spectral")
# extract
grid$pop <- round(extract(pop["kor_ppp_2020_constrained"], grid, fun = "mean", method = "bilinear", ID = FALSE), 0)
ggplot() + geom_spatvector(data = grid, aes(fill = (pop)), color = NA) + scale_fill_distiller(palette = "Spectral")
# extract
grid$pop <- round(extract(pop["kor_ppp_2020_constrained"], grid, fun = "mean", na.rm = TRUE, method = "bilinear", ID = FALSE), 0)
ggplot() + geom_spatvector(data = grid, aes(fill = (pop)), color = NA) + scale_fill_distiller(palette = "Spectral")
grid
writeVector(grid, "data/seoulgrid.shp", overwrite = TRUE)
temp <- vect("/Users/Josh/Dropbox/KDIS/Classes/geospatialdataR/assignments/in-class1/data/seoulgrid.shp")
temp
temp <- read_csv("/Users/Josh/Dropbox/KDIS/Classes/geospatialdataR/assignments/in-class1/data/seoulpoints.csv")
