plot_gg(g1, multicore = TRUE, theta = 10, phi = 55, shadow = FALSE, preview = TRUE, scale = 300, width = 5, height = 6)
Sys.sleep(0.2)
render_snapshot()
rgl.close()
par(mfrow = c(1, 1))
plot_gg(g1, multicore = TRUE, theta = 10, phi = 55, shadow = FALSE, preview = TRUE, scale = 300, width = 5, height = 6)
Sys.sleep(0.2)
render_snapshot()
par(mfrow = c(1, 1))
plot_gg(g1, multicore = TRUE, theta = 10, phi = 55, shadow = FALSE, preview = TRUE, scale = 300, width = 5, height = 6)
Sys.sleep(0.5)
render_snapshot()
par(mfrow = c(1, 1))
plot_gg(g1, multicore = TRUE, theta = 10, phi = 55, shadow = FALSE, preview = TRUE, scale = 300, width = 5, height = 6)
Sys.sleep(2)
render_snapshot()
plot_gg(g1, multicore = TRUE, theta = 10, phi = 55, shadow = FALSE,
preview = TRUE, scale = 300, width = 5, height = 6, sunangle = 30)
plot_gg(g1, multicore = TRUE, theta = 10, phi = 55, shadow = FALSE,
preview = TRUE, scale = 300, width = 5, height = 6, sunangle = 30)
plot_gg(g1, multicore = TRUE, theta = 10, phi = 55, preview = TRUE,
scale = 300, width = 5, height = 6, sunangle = 30)
plot_gg(g1, multicore = TRUE, theta = 10, phi = 55,
scale = 300, width = 5, height = 6, sunangle = 30)
temp <- read_csv("'/Users/Josh/Downloads/ad_viz_plotval_data(1).csv'")
temp <- read_csv('/Users/Josh/Downloads/ad_viz_plotval_data(1).csv')
temp
length(unique(temp$`Site ID`))
temp <- read_csv('/Users/Josh/Downloads/ad_viz_plotval_data(2).csv')
length(unique(temp$`Site ID`))
library(terra)
library(tidyverse)
temp <- read_csv("/Users/Josh/Dropbox/KDIS/Classes/geospatialdataR/assignments/assignment2/krpollution.csv")
temp
temp <- vect(temp, geom = c("lon", "lat"), crs = "EPSG:4326")
temp
library(tidyterra)
ggplot() + geom_spatvector(data = temp, color = "red")
temp <- vect("/Users/Josh/Downloads/skorea-submunicipalities-2018-geo.json")
temp
temp <- temp |> select(-name)
temp
getwd()
setwd("~/Dropbox/KDIS/Classes/geospatialdataR/assignments/assignment2")
writeVector(temp, "koreashape.shp")
library(terra)
library(tidytera)
library(tidyterra)
library(tidyverse)
temp <- vect("koreashape")
temp <- vect("koreashape.shp")
pol <- read_csv("krpollution")
pol <- read_csv("krpollution.csv")
pol
pol <- vect(pol, geom = c("lon", "lat"), crs = "EPSG:4326")
pol <- intersect(pol, temp)
pol
pol$geometry
geom(pol)[,"x"]
pol$lon <- geom(pol)[,"x"]
pol$lat <- geom(pol)[,"y"]
pol
pol <- as_tibble(pol)
pol
write_csv(pol, "krpollution.csv")
pol <- read_csv("krpollution.csv")
pol <- vect(pol, geom = c("lon", "lat"), crs = "EPSG:4326")
ggplot() + geom_spatvector(data = pol)
ggplot() + geom_spatvector(data = pol, color = "red") + geom_spatvector(data = temp, fill = NA)
nrow(pol)
pol
pol <- as_tibble(pol)
pol
pol$fold <- sample(1:5, nrow(pol), replace = TRUE)
pol
write_csv(pol, "krpollution.csv")
pol <- read_csv("krpollution.csv")
pol <- vect(pol, geom = c("lon", "lat"), crs = "EPSG:4326")
pol
pol <- read_csv("krpollution.csv")
pol <- vect(pol, geom = c("lon", "lat"), crs = "EPSG:4326")
pol
pol <- intersect(pol, temp)
pol$lon <- geom(pol)[,"x"]
pol$lat <- geom(pol)[,"y"]
pol$folds <- sample(1:5, nrow(pol), replace = TRUE)
pol
pol <- pol |> select(aqi, lon, lat, fold)
pol <- pol |> select(aqi, lon, lat, folds)
pol <- pol |> select(aqi, lon, lat, fold = folds)
pol
pol <- as_tibble(pol)
pol
write_csv(pol, "krpollution.csv")
pol <- read_csv("krpollution.csv")
pol <- vect(pol, geom = c("lon", "lat"), crs = "EPSG:4326")
pol
table(pol$fold)
ggplot() + geom_spatvector(data = pol, color = "red") + geom_spatvector(data = temp, fill = NA)
temp <- vect("koreashape.shp")
temp
raster <- rast(temp, res = 0.1)
raster
raster <- rast(temp, res = 0.01)
raster
raster <- as.polygons(raster)
raster <- centroids(raster)
raster
raster <- rast(temp, res = 0.01)
raster <- as.polygons(raster)
raster
434*357
raster <- rast(temp, res = 0.05)
raster <- as.polygons(raster)
raster
raster <- as.polygons(raster)
raster
raster <- centroids(raster)
raster
library(gstat)
pol
results <- idw(aqi~1, sf::st_as_sf(pol), sf::st_as_sf(raster))
results
summary(results)
pol
summary(pol)
pol$aqi <- as.numeric(pol$aqi)
pol
summary(pol$aqi)
results <- idw(aqi~1, sf::st_as_sf(pol), sf::st_as_sf(raster))
pol <- pol[!is.na(pol$aqi),]
results <- idw(aqi~1, sf::st_as_sf(pol), sf::st_as_sf(raster))
results
results <- idw(aqi~1, sf::st_as_sf(pol), sf::st_as_sf(raster), beta = 2)
results
temp$aqi <- results$var1.pred
temp
ggplot() + geom_spatvector(data = temp, aes(fill = aqi), color = NA) + scale_fill_distiller(palette = "Spectral")
results <- idw(log(aqi)~1, sf::st_as_sf(pol), sf::st_as_sf(raster), beta = 2)
temp$aqi <- results$var1.pred
ggplot() + geom_spatvector(data = temp, aes(fill = aqi), color = NA) + scale_fill_distiller(palette = "Spectral")
pol <- read_csv("krpollution.csv")
pol
pol <- vect(pol, geom = c("lon", "lat"), crs = "EPSG:4326")
pol
results <- idw(pm10~1, sf::st_as_sf(pol), sf::st_as_sf(raster), beta = 2)
temp$aqi <- results$var1.pred
ggplot() + geom_spatvector(data = temp, aes(fill = aqi), color = NA) + scale_fill_distiller(palette = "Spectral")
raster$aqi <- results$var1.pred
ggplot() + geom_spatvector(data = raster, aes(fill = aqi), color = NA) + scale_fill_distiller(palette = "Spectral")
results
raster
ggplot() + geom_spatvector(data = raster, aes(color = aqi)) + scale_color_distiller(palette = "Spectral")
results <- idw(pm10~1, sf::st_as_sf(pol), sf::st_as_sf(temp), beta = 2)
temp
grid = centroids(temp)
results <- idw(pm10~1, sf::st_as_sf(pol), sf::st_as_sf(grid), beta = 2)
geom(grid)
max(geom(grid)[,"part"])
is_points(grid)
is.points(grid)
grid
grid = centroids(grid)
grid
results <- idw(pm10~1, sf::st_as_sf(pol), sf::st_as_sf(grid), beta = 2)
pol
summary(pol)
is.empty(pol)
summary(pol)
temp
grid = centroids(temp)
temp
is.empty(temp)
is.empty(temp[1,])
for i in 1:nrow(temp) is.empty(temp[i,])
geom(temp)
max(geom(temp)[,"part"])
nrow(geom(temp))
temp
grid = centroids(temp, within = TRUE)
?centroids
grid = centroids(temp, inside = TRUE)
grid
temp <- temp[temp$code %in% grid$code]
temp
length(unique(temp$code))
temp <- temp[temp$code %in% grid$code, ]
temp
temp = aggregate(temp, "code")
nrow(geom(temp))
temp <- vect("koreashape.shp")
temp
grid = centroids(temp)
grid
temp$id = 1:nrow(temp)
temp
grid = centroids(temp)
grid
temp <- temp[temp$id %in% grid$id,]
temp
geom(grid)
max(geom(grid)[,"hole"])
max(geom(grid)[,"part"])
max(geom(grid)[,"geom"])
max(geom(temp)[,"geom"])
grid = intersect(grid, temp)
grid
grid = centroids(temp)
grid
grid = grid[,-c("id")]
grid = grid[,-"id"]
grid = grid |> select(-"id")
grid = grid |> dplyr""select(-"id")
grid = grid |> dplyr::select(-"id")
temp = vect("koreashape.shp")
temp
grid = centroids(temp)
grid
temp$id = 1:nrow(temp)
grid = intersect(grid, temp)
grid
temp = temp[temp$id %in% grid$id,]
temp
grid
grid = centroids(temp)
grid
ggplot() + geom_spatvector(data = temp)
writeVector(temp, "koreashape.shp", overwrite = TRUE)
temp <- vect("koreashape.shp")
temp
grid = centroids(temp)
grid
results <- idw(pm10~1, sf::st_as_sf(pol), sf::st_as_sf(grid), beta = 2)
grid$results = results$var1.pred
temp$results = results$var1.pred
ggplot() + geom_spatvector(data = temp, aes(fill = results), color = NA)
ggplot() + geom_spatvector(data = temp, aes(fill = results), color = NA) + scale_fill_distiller(palette = "Spectral")
ggplot() + geom_spatvector(data = temp, aes(fill = log(results)), color = NA) + scale_fill_distiller(palette = "Spectral")
pol
temp
?idw
raster
cbind(as_tibble(raster), geom(raster)[,c("x", "y")]))
cbind(as_tibble(raster), geom(raster)[,c("x", "y")])
raster = cbind(as_tibble(raster), geom(raster)[,c("x", "y")])
?rast
rast(raster, type = "xyz")
rast(raster, type = "xyz", crs = "EPSG:4326")
raster = rast(temp, res = 0.05)
raster
temp
87*71
temp
raster
raster <- as.polygons(raster)
raster
grid = centroids(raster)
grid
results = idw(log(pm10), sf::st_as_sf(pol), sf:st_as_sf(grid))
pol
results = idw(log(pol$pm10), sf::st_as_sf(pol), sf:st_as_sf(grid))
results = idw(log(pm10)~1, sf::st_as_sf(pol), sf:st_as_sf(grid))
results = idw(log(pm10)~1, sf::st_as_sf(pol), sf::st_as_sf(grid))
results
temp
temp$results = results$var1.pred
temp
vect(temp)
rast(temp)
#| echo: true
#| eval: false
#| crop: true
#| fig-align: center
#| message: false
# create the variogram
pm.vgm <- variogram(log(pm10)~1, sf::st_as_sf(pol)) # calculates sample variogram values
# fit the variogram
pm.fit <- fit.variogram(pm.vgm, model=vgm("Gau")) # fit model
plot(results)
plot(pm.ft)
plot(pm.fit)
temp
grid = centroids(temp)
# predict
pm.kriged <- krige(log(pm10) ~ 1, sf::st_as_sf(pol), sf::st_as_sf(grid), model=pm.fit)
# put results into the ca shapefile
temp$krigingresults <- pm.kriged$var1.pred
ggplot() +
geom_spatvector(data = temp, aes(fill = krigingresults), color = NA) +
scale_fill_distiller("PM 2.5 (log)\nJan. 2020", palette = "Spectral") +
theme_bw() +
theme(plot.background = element_rect(fill = "#f0f1eb", color = "#f0f1eb")) +
theme(legend.background = element_rect(fill = "#f0f1eb", color = "#f0f1eb"))
grid = centroids(temp)
grid = centroids(temp)
# create the variogram
pm.vgm <- variogram(log(pm10)~1, sf::st_as_sf(pol[pol$fold!=1,])) # calculates sample variogram values
# fit the variogram
pm.fit <- fit.variogram(pm.vgm, model=vgm("Gau")) # fit model
# predict
pm.kriged <- krige(log(pm10) ~ 1, sf::st_as_sf(pol[pol$fold!=1,]), sf::st_as_sf(pol), model=pm.fit)
pm.kriged
pol$pm.kriged.fold1 = pm.kriged$var1.pred
pol[["pm.kriged.fold1"]]
for (i in 1:5){
# create the variogram
pm.vgm <- variogram(log(pm10)~1, sf::st_as_sf(pol[pol$fold!=i,])) # calculates sample variogram values
# fit the variogram
pm.fit <- fit.variogram(pm.vgm, model=vgm("Gau")) # fit model
# create the grid
grid <- centroids(ca)
# predict
pm.kriged <- krige(log(pm10) ~ 1, sf::st_as_sf(pol[pol$fold!=i,]), sf::st_as_sf(pol[pol$fold==i,]), model=pm.fit)
pol[[paste0("pm.kriged.fold", i)]] = pm.kriged$var1.pred
}
for (i in 1:5){
# create the variogram
pm.vgm <- variogram(log(pm10)~1, sf::st_as_sf(pol[pol$fold!=i,])) # calculates sample variogram values
# fit the variogram
pm.fit <- fit.variogram(pm.vgm, model=vgm("Gau")) # fit model
# predict
pm.kriged <- krige(log(pm10) ~ 1, sf::st_as_sf(pol[pol$fold!=i,]), sf::st_as_sf(pol[pol$fold==i,]), model=pm.fit)
pol[[paste0("pm.kriged.fold", i)]] = pm.kriged$var1.pred
}
pm.kriged <- idw(log(pm10) ~ 1, sf::st_as_sf(pol[pol$fold!=i,]), sf::st_as_sf(pol[pol$fold==i,]), nmax = 1)
pol[[paste0("idw1", i)]] = pm.kriged$var1.pred
for (i in 1:5){
pm.kriged <- idw(log(pm10) ~ 1, sf::st_as_sf(pol[pol$fold!=i,]), sf::st_as_sf(pol[pol$fold==i,]), nmax = 1)
pol[[paste0("idw1", i)]] = pm.kriged$var1.pred
pm.kriged <- idw(log(pm10) ~ 1, sf::st_as_sf(pol[pol$fold!=i,]), sf::st_as_sf(pol[pol$fold==i,]))
pol[[paste0("idwall", i)]] = pm.kriged$var1.pred
# create the variogram
pm.vgm <- variogram(log(pm10)~1, sf::st_as_sf(pol[pol$fold!=i,])) # calculates sample variogram values
# fit the variogram
pm.fit <- fit.variogram(pm.vgm, model=vgm("Gau")) # fit model
# predict
pm.kriged <- krige(log(pm10) ~ 1, sf::st_as_sf(pol[pol$fold!=i,]), sf::st_as_sf(pol[pol$fold==i,]), model=pm.fit)
pol[[paste0("pm.kriged.fold", i)]] = pm.kriged$var1.pred
}
pol
pol[["idw1"]] <- NA
pol[["idwall"]] <- NA
pol[["kriging"]] <- NA
pol[["idw1"]] <- NA
pol[["idwall"]] <- NA
pol[["kriging"]] <- NA
for (i in 1:5){
pm.kriged <- idw(log(pm10) ~ 1, sf::st_as_sf(pol[pol$fold!=i,]), sf::st_as_sf(pol[pol$fold==i,]), nmax = 1)
pol[["idw1"]][pol$fold==i] = pm.kriged$var1.pred
pm.kriged <- idw(log(pm10) ~ 1, sf::st_as_sf(pol[pol$fold!=i,]), sf::st_as_sf(pol[pol$fold==i,]))
pol[["idwall"]][pol$fold==i] = pm.kriged$var1.pred
# create the variogram
pm.vgm <- variogram(log(pm10)~1, sf::st_as_sf(pol[pol$fold!=i,])) # calculates sample variogram values
# fit the variogram
pm.fit <- fit.variogram(pm.vgm, model=vgm("Gau")) # fit model
# predict
pm.kriged <- krige(log(pm10) ~ 1, sf::st_as_sf(pol[pol$fold!=i,]), sf::st_as_sf(pol[pol$fold==i,]), model=pm.fit)
pol[["kriging"]][pol$fold==i] = pm.kriged$var1.pred
}
pol[["idw1"]][pol$fold==i]
pol[pol$fold==i, "idw1"]
pol[["idw1"]] <- NA
pol[["idwall"]] <- NA
pol[["kriging"]] <- NA
for (i in 1:5){
pm.kriged <- idw(log(pm10) ~ 1, sf::st_as_sf(pol[pol$fold!=i,]), sf::st_as_sf(pol[pol$fold==i,]), nmax = 1)
pol[pol$fold==i, "idw1"] = pm.kriged$var1.pred
pm.kriged <- idw(log(pm10) ~ 1, sf::st_as_sf(pol[pol$fold!=i,]), sf::st_as_sf(pol[pol$fold==i,]))
pol[pol$fold==i, "idwall"] = pm.kriged$var1.pred
# create the variogram
pm.vgm <- variogram(log(pm10)~1, sf::st_as_sf(pol[pol$fold!=i,])) # calculates sample variogram values
# fit the variogram
pm.fit <- fit.variogram(pm.vgm, model=vgm("Gau")) # fit model
# predict
pm.kriged <- krige(log(pm10) ~ 1, sf::st_as_sf(pol[pol$fold!=i,]), sf::st_as_sf(pol[pol$fold==i,]), model=pm.fit)
pol[pol$fold==i, "kriging"] = pm.kriged$var1.pred
}
names(pol)
mean((log(pol$pm10) - pol$idw1)^2)
mean((log(pol$pm10) - pol$idwall)^2)
mean((log(pol$pm10) - pol$kriging)^2)
temp
raster <- rast(temp, res = 0.05)
raster
87*71
centroids(raster)
raster <- as.polygons(raster)
raster <- centroids(raster)
raster
pm.kriged <- idw(log(pm10) ~ 1, sf::st_as_sf(pol), sf::st_as_sf(raster))
idwresults <- idw(log(pm10) ~ 1, sf::st_as_sf(pol), sf::st_as_sf(raster))
idwresults
raster$pm10 <- idwresults$var1.pred
raster
raster$pm10 <-
raster <- cbind(geom(raster)[,c("x", "y")], idwresults$var1.pred)
raster
raster <- rast(temp, res = 0.05)
raster <- as.polygons(raster)
raster <- centroids(raster)
idwresults <- idw(log(pm10) ~ 1, sf::st_as_sf(pol), sf::st_as_sf(raster))
geom(raster)[,c("x", "y")]
nrow(geom(raster)[,c("x", "y")])
length(idwresults$var1.pred)
cbind(geom(raster)[,c("x", "y")], idwresults$var1.pred)
raster <- cbind(geom(raster)[,c("x", "y")], idwresults$var1.pred)
raster
rast(raster, type = "xyz")
raster
nrow(raster)
rast(raster, type = "xyz", crs = "EPSG:4326")
summary(raster)
raster <- rast(temp, res = 0.05)
raster
dim(raster)
rows <- dim(raster)[1]
cols <- dim(raster)[2]
raster <- as.polygons(raster)
raster <- centroids(raster)
idwresults <- idw(log(pm10) ~ 1, sf::st_as_sf(pol), sf::st_as_sf(raster))
raster <- cbind(geom(raster)[,c("x", "y")], idwresults$var1.pred)
raster <- rast(temp, res = 0.05)
rows <- dim(raster)[1]
cols <- dim(raster)[2]
raster <- as.polygons(raster)
raster <- centroids(raster)
idwresults <- idw(log(pm10) ~ 1, sf::st_as_sf(pol), sf::st_as_sf(raster))
raster <- as.data.frame(cbind(geom(raster)[,c("x", "y")], idwresults$var1.pred))
rast(raster, type = "xyz", crs = "EPSG:4326")
raster
class(raster)
rast(raster, type = "xyz", crs = "EPSG:4326")
rast(raster, type = "xyz", crs = "EPSG:4326", nrow = rows)
?xyFromCell
raster <- rast(temp, res = 0.05)
rows <- dim(raster)[1]
cols <- dim(raster)[2]
raster <- as.polygons(raster)
raster <- centroids(raster)
idwresults <- idw(log(pm10) ~ 1, sf::st_as_sf(pol), sf::st_as_sf(raster))
raster <- as.data.frame(cbind(geom(raster)[,c("x", "y")], idwresults$var1.pred), cell = TRUE)
raster
raster <- rast(temp, res = 0.05)
rows <- dim(raster)[1]
cols <- dim(raster)[2]
raster <- as.polygons(raster)
raster
raster <- rast(temp, res = 0.05)
rows <- dim(raster)[1]
cols <- dim(raster)[2]
raster
raster$val <- 1:nrow(raster)
nrow(raster)
ncol(raster)
raster <- rast(temp, res = 0.05)
rows <- dim(raster)[1]
cols <- dim(raster)[2]
raster$id <- 1:(rows*cols)
raster
raster <- as.polygons(raster)
raster
grid <- centroids(raster)
idwresults <- idw(log(pm10) ~ 1, sf::st_as_sf(pol), sf::st_as_sf(grid))
idwresults
grid$pred <- idwresults$var1.pred
grid
raster$pm10 <- grid$pred
raster
ggplot() + geom_spatraster(data = raster, aes(fill = pm10)) +
scale_fill_distiller("PM 10\n(log)", palette = "Spectral")
raster
rast(raster)
raster <- rast(temp, res = 0.05)
rows <- dim(raster)[1]
cols <- dim(raster)[2]
raster
nrow(raster)
raster$id <- 1:(rows*cols)
raster$id <- 1:(rows*cols)
raster <- rast(temp, res = 0.05)
rows <- dim(raster)[1]
cols <- dim(raster)[2]
raster$id <- 1:(rows*cols)
rasterpol <- as.polygons(raster)
grid <- centroids(rasterpol)
idwresults <- idw(log(pm10) ~ 1, sf::st_as_sf(pol), sf::st_as_sf(grid))
grid$pred <- idwresults$var1.pred
grid
rasterpol
raster
raster$pm10 <- grid$pred
raster
ggplot() + geom_spatraster(data = raster, aes(fill = pm10)) +
scale_fill_distiller("PM 10\n(log)", palette = "Spectral")
rasterpol$pm10 <- idwresults$var1.pred
rasterpol
ggplot() + geom_spatvector(data = rasterpol, aes(fill = pm10), color = NA) +
scale_fill_distiller("PM 10\n(log)", palette = "Spectral")
ggplot() + geom_spatraster(data = raster, aes(fill = exp(pm10))) +
scale_fill_distiller("PM 10\n(log)", palette = "Spectral")
ggplot() + geom_spatraster(data = raster, aes(fill = pm10)) +
scale_fill_distiller("PM 10\n(log)", palette = "Spectral")
ggplot() + geom_spatraster(data = raster, aes(fill = exp(pm10))) +
scale_fill_distiller("PM 10\n(log)", palette = "Spectral")
ggplot() + geom_spatraster(data = raster, aes(fill = pm10)) +
scale_fill_distiller("PM 10\n(log)", palette = "Spectral")
ggplot() + geom_spatvector(data = rasterpol, aes(fill = exp(pm10)), color = NA) +
scale_fill_distiller("PM 10\n(log)", palette = "Spectral")
ggplot() + geom_spatvector(data = rasterpol, aes(fill = pm10), color = NA) +
scale_fill_distiller("PM 10\n(log)", palette = "Spectral")
ggplot() + geom_spatraster(data = raster, aes(fill = pm10)) +
scale_fill_distiller("PM 10\n(log)", palette = "Spectral")
