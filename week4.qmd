---
title:  "Geospatial data analysis in R"
subtitle: "Relating vector data II"
author: "Josh Merfeld"
institute: "KDI School"
date: "`r Sys.Date()`"

date-format: long
format: 
  revealjs:
    self-contained: true
    slide-number: false
    progress: false
    theme: [serif, custom.scss]
    width: 1500
    height: 1500*(9/16)
    code-copy: true
    code-fold: show
    code-overflow: wrap
    highlight-style: github
execute:
  echo: true
  warnings: false
---

```{r}
#| label: setup
#| include: false
knitr::knit_hooks$set(crop = knitr::hook_pdfcrop)

library(tidyverse)
library(terra)
library(tidyterra)
library(cowplot)
library(kableExtra)
library(haven)

kdisgreen <- "#006334"
accent <- "#340063"
accent2 <- "#633400"
kdisgray <- "#A7A9AC"

```



  
# Distances

## More distances

- We have points for households
- We have points for health facilities

- We can calculate the distance between each household and each health facility
  - Finding distances between points is a common GIS task!

- Make sure to call the libraries we'll need!
  - `tidyverse`
  - `terra`
  - `tidyterra`




## Distance matrix

- The name of the households data is `households.dta`
  - This is a Stata dataset
  - You can read it using the package `haven`
  
- Please go ahead and try loading the dataset and then turning it into a `terra` object
  - You'll have to find the names of the columns that represent the coordinates





## Distance matrix
  
```{r}
#| echo: true
#| include: true
#| eval: true
#| fig-align: center
#| crop: true
# households
households <- read_dta("week4files/households.dta")
households <- vect(households, geom = c("ea_lon_mod", "ea_lat_mod"), crs = "EPSG:4326")
# health facilities
# do it in one line!
health <- vect(read_csv("week4files/points.csv"), geom = c("x", "y"), crs = "EPSG:4326")
```





## Distance matrix
  
```{r}
#| echo: true
#| include: true
#| eval: true
#| fig-align: center
#| crop: true

distances <- distance(households, health)
dim(households)
dim(health)
dim(distances)
```





## Distance matrix - "Heat map"

```{r}
#| echo: false
#| include: true
#| eval: true
#| fig-align: center
#| crop: true


distances <- as_tibble(distances)
distances$hhid <- 1:nrow(distances)
# pivot longer
distances <- pivot_longer(distances, -hhid, names_to = "facility", values_to = "distance")
distances$facility <- as.numeric(substr(distances$facility, 2, str_length(distances$facility)))

ggplot(distances) + 
  geom_tile(aes(x = hhid, y = facility, fill = distance/1000), color = NA) +
  scale_fill_distiller("Distances\n(km)", palette = "Spectral") +
  theme_bw() +
  labs(x = "Households", y = "Health facilities") +
  theme(axis.text.x=element_blank(),
        axis.ticks.x=element_blank()) +
  theme(axis.text.y=element_blank(),
        axis.ticks.y=element_blank()) +
  theme(plot.background = element_rect(fill = "#f0f1eb", color = "#f0f1eb")) +
  theme(plot.background = element_rect(fill = "#f0f1eb", color = "#f0f1eb")) +
  theme(legend.background = element_rect(fill = "#f0f1eb", color = "#f0f1eb"))
```





## Closest health facility by household

```{r}
#| echo: false
#| include: true
#| eval: true
#| fig-align: center
#| crop: true

distances <- distances |>
  group_by(hhid) |>
  summarize(distance = min(distance)) |>
  ungroup()
households$distance <- distances$distance
ggplot() + 
  geom_spatvector(data = households, aes(color = distance/1000), size = 0.5) +
  scale_color_distiller("Distances\n(km)", palette = "Spectral") +
  theme_bw() +
  theme(plot.background = element_rect(fill = "#f0f1eb", color = "#f0f1eb")) +
  theme(plot.background = element_rect(fill = "#f0f1eb", color = "#f0f1eb")) +
  theme(legend.background = element_rect(fill = "#f0f1eb", color = "#f0f1eb"))
```





## How did I create the map?

- The `distances` object is a matrix
  - What are the rows and what are the columns?

. . .

- If we want to find the closest health facility to each household, what do we need to do?
  - We need to find the minimum distance for each row
  - Do you remember?





## Closest health facility by household

- We can use the `apply` function!
  - But with `"min"` instead of `"sum"`
  - The rows are in the same order as the households, so...
  
. . .

```{r}
#| echo: true
#| include: true
#| eval: false
#| fig-align: center
#| crop: true

distances <- distance(households, health)
closest <- apply(distances, 1, "min")

# they're in the same order!
households$closest <- closest

ggplot() + 
  geom_spatvector(data = households, aes(color = closest/1000), size = 0.5) +
  scale_color_distiller("Distances\n(km)", palette = "Spectral") +
  theme_bw()
```
  




## Distances - points and polygons

- What if we want to find the distance from points to polygons?

- For example, what if we want to find the distance from the households to the two largest cities??
  - Lilongwe and Blantyre

  
```{r}
#| echo: true
#| include: true
#| eval: true
#| fig-align: center
#| crop: true
households <- read_dta("week4files/households.dta")
households <- vect(households, geom = c("ea_lon_mod", "ea_lat_mod"), crs = "EPSG:4326")
# mw3
mw3 <- vect("week4files/mw3allcountry.shp")
mw3 <- mw3 |> filter(NAME_1 %in% c("Lilongwe", "Blantyre"))
mw3 <- aggregate(mw3, "ID_1")
table(mw3$ID_1)
```
  




## Distances - points and polygons


  
```{r}
#| echo: false
#| include: true
#| eval: true
#| fig-align: center
#| crop: true
# mw3

ggplot() + 
  geom_spatvector(data = households, color = "red", size = 0.5, alpha = 0.5) +
  geom_spatvector(data = mw3, color = "black", fill = "transparent") +
  theme_bw() +
  theme(plot.background = element_rect(fill = "#f0f1eb", color = "#f0f1eb")) +
  theme(plot.background = element_rect(fill = "#f0f1eb", color = "#f0f1eb")) +
  theme(legend.background = element_rect(fill = "#f0f1eb", color = "#f0f1eb"))

```






## Distance matrix
  
```{r}
#| echo: true
#| include: true
#| eval: true
#| fig-align: center
#| crop: true
# projected CRS
households <- project(households, "EPSG:20936")
mw3 <- project(mw3, "EPSG:20936")

# distance matrix!
distances <- distance(households, mw3, unit = "km")
distances

```

. . .

- So what do we do now?

. . .
  
```{r}
#| echo: true
#| include: true
#| eval: true
#| fig-align: center
#| crop: true

# same thing!
distances <- apply(distances, 1, "min")
households$closest_city <- distances
```
  




## Distances - points and polygons

  
```{r}
#| echo: false
#| include: true
#| eval: true
#| fig-align: center
#| crop: true
# mw3

ggplot() + 
  geom_spatvector(data = households, aes(color = closest_city), size = 0.5, alpha = 0.5) +
  scale_color_distiller("Distances\n(km)", palette = "Spectral") +
  theme_bw() +
  theme(plot.background = element_rect(fill = "#f0f1eb", color = "#f0f1eb")) +
  theme(plot.background = element_rect(fill = "#f0f1eb", color = "#f0f1eb")) +
  theme(legend.background = element_rect(fill = "#f0f1eb", color = "#f0f1eb"))

```
  




## Related: Voronoi polygons

```{r}
#| echo: false
#| include: true
#| eval: true
#| fig-align: center
#| crop: true

mw3 <- vect("week4files/mw3allcountry.shp")
mw3centroids <- aggregate(mw3, "ID_1")
mw3centroids <- centroids(mw3centroids)
voronoi <- voronoi(mw3centroids, bnd = mw3)
# now intersect
mw3 <- aggregate(mw3)
voronoi <- intersect(voronoi, mw3)


ggplot() + 
  geom_spatvector(data = voronoi) +
  geom_spatvector(data = mw3centroids) +
  theme_bw() +
  theme(plot.background = element_rect(fill = "#f0f1eb", color = "#f0f1eb")) +
  theme(plot.background = element_rect(fill = "#f0f1eb", color = "#f0f1eb")) +
  theme(legend.background = element_rect(fill = "#f0f1eb", color = "#f0f1eb"))

```





## Related: Voronoi polygons

- Can you tell what the polygons represent?

. . .

- The polygons represent the area that is closest to some given points
  - In our case, it is the distance to the admin1 CENTROIDS
  - This is called a Voronoi diagram (or polygons)




## Centroids

```{r}
#| echo: false
#| include: true
#| eval: true
#| fig-align: center
#| crop: true

# let's start with centroids
mw3 <- vect("week4files/mw3allcountry.shp")
# aggregate to ID_1
mw3 <- aggregate(mw3, "ID_1")
mw3centroids <- centroids(mw3)
mw3centroids

```

- Note that it is now points!




## Centroids

```{r}
#| echo: true
#| include: true
#| eval: false
#| fig-align: center
#| crop: true

ggplot() +
  geom_spatvector(data = mw3centroids) +
  geom_spatvector(data = mw3, fill = NA) +
  theme_bw()

```

```{r}
#| echo: false
#| include: true
#| eval: true
#| fig-align: center
#| crop: true

ggplot() +
  geom_spatvector(data = mw3centroids) +
  geom_spatvector(data = mw3, fill = NA) +
  theme_bw() +
  theme(plot.background = element_rect(fill = "#f0f1eb", color = "#f0f1eb")) +
  theme(plot.background = element_rect(fill = "#f0f1eb", color = "#f0f1eb")) +
  theme(legend.background = element_rect(fill = "#f0f1eb", color = "#f0f1eb"))

```







## Creating a Voronoi diagram

- To create the diagram, we need to do the following:
  - Create the points that represent the points of interest (already done)
  - Create the entire spatial extent we want to cover (already done! just use adm3)

```{r}
#| echo: true
#| include: true
#| eval: true
#| fig-align: center
#| crop: true

# mw3
mw3 <- vect("week4files/mw3allcountry.shp")
# first aggregate to ID_1
mw3 <- aggregate(mw3, "ID_1")
# create centroids
mw3centroids <- centroids(mw3)
# now aggregate mw3 to country level
mw3 <- aggregate(mw3)
# bnd stands for "boundary"
voronoi <- voronoi(mw3centroids, bnd = mw3)

```






## Creating a Voronoi diagram

```{r}
#| echo: true
#| include: true
#| eval: false
#| fig-align: center
#| crop: true

ggplot() +
  geom_spatvector(data = voronoi) +
  geom_spatvector(data = mw3centroids) +
  theme_bw()

```

```{r}
#| echo: false
#| include: true
#| eval: true
#| fig-align: center
#| crop: true

ggplot() +
  geom_spatvector(data = voronoi) +
  geom_spatvector(data = mw3centroids) +
  theme_bw() +
  theme(plot.background = element_rect(fill = "#f0f1eb", color = "#f0f1eb")) +
  theme(plot.background = element_rect(fill = "#f0f1eb", color = "#f0f1eb")) +
  theme(legend.background = element_rect(fill = "#f0f1eb", color = "#f0f1eb"))

```






## The last bit

- The last bit is to intersect the Voronoi polygons with Malawi to only show the areas of the country (and not the entire bounding box)
  - We'll come back to this later!










# More advanced operations

## Let's go over some more advanced operations

- First up:
  - Spatial overlap







## A grid in Korea - `kgrid.zip`

```{r}
#| echo: false
#| include: true
#| eval: true
#| fig-align: center
#| crop: true


kshape <- vect("week4files/kshape.shp")
kgrid <- vect("week4files/kgrid.shp")

ggplot() + 
  geom_spatvector(data = kgrid, fill = NA) + 
  theme_bw() +
  theme(plot.background = element_rect(fill = "#f0f1eb", color = "#f0f1eb")) +
  theme(plot.background = element_rect(fill = "#f0f1eb", color = "#f0f1eb")) +
  theme(legend.background = element_rect(fill = "#f0f1eb", color = "#f0f1eb"))

```








## A grid in Korea - `kgrid.zip`

- We will discuss how to make a grid after we learn about rasters

- For now, the grid is a shapefile

- A very common operation:
  - We want to know which province/city each grid cell is in
  - This isn't straightforward. Why?

. . .

- A grid cell can overlap multiple provinces/cities







## The data

- Here is the data:
  - `kshape.shp` is the shapefile of the provinces/cities
  - `kgrid.shp` is the grid
  - I have uploaded .zip files for both

<br>

```{r}
#| echo: true
#| include: true
#| eval: true
#| fig-align: center
#| crop: true
kshape <- vect("week4files/kshape.shp")
kgrid <- vect("week4files/kgrid.shp")
kgrid
```







## The `intersect` function from `terra`

- We are going to use the `intersect` function

- Here's what it will do:
  - It will find the intersection of the grid cell and the province/city
  - Except, it will return a new feature for EACH overlap
  
- Let's look at some maps



## The `intersect` function from `terra`

```{r}
#| echo: false
#| include: true
#| eval: true
#| fig-align: center
#| crop: true
g1 <- ggplot() + 
  geom_spatvector(data = kshape, fill = NA) +
  theme_bw() +
  labs(subtitle = "A. Provinces/cities") +
  theme(plot.background = element_rect(fill = "#f0f1eb", color = "#f0f1eb")) +
  theme(plot.background = element_rect(fill = "#f0f1eb", color = "#f0f1eb")) +
  theme(legend.background = element_rect(fill = "#f0f1eb", color = "#f0f1eb"))
g2 <- ggplot() + 
  geom_spatvector(data = kgrid, fill = NA) +
  theme_bw() +
  labs(subtitle = "B. Grids") +
  theme(plot.background = element_rect(fill = "#f0f1eb", color = "#f0f1eb")) +
  theme(plot.background = element_rect(fill = "#f0f1eb", color = "#f0f1eb")) +
  theme(legend.background = element_rect(fill = "#f0f1eb", color = "#f0f1eb"))
plot_grid(g1, g2) +
  theme(plot.background = element_rect(fill = "#f0f1eb", color = "#f0f1eb")) +
  theme(plot.background = element_rect(fill = "#f0f1eb", color = "#f0f1eb")) +
  theme(legend.background = element_rect(fill = "#f0f1eb", color = "#f0f1eb"))

```



## The `intersect` function from `terra`

```{r}
#| echo: true
#| include: true
#| eval: true
#| fig-align: center
#| crop: true

kgrid
# Note: This takes a bit of time
intersection <- intersect(kgrid, kshape)
intersection


```



## One grid cell, multiple overlaps

```{r}
#| echo: false
#| include: true
#| eval: true
#| fig-align: center
#| crop: true

ggplot() +
  geom_spatvector(data = intersection[intersection$id==1069,]) +
  geom_spatvector(data = kgrid[kgrid$id==1069,], fill = NA) +
  geom_spatvector(data = intersect(kshape, ext(intersection[intersection$id==1069,])), aes(fill = CTP_ENG_NM)) +
  scale_fill_brewer("Province", palette = "Set3") +
  theme_bw() +
  theme(plot.background = element_rect(fill = "#f0f1eb", color = "#f0f1eb")) +
  theme(plot.background = element_rect(fill = "#f0f1eb", color = "#f0f1eb")) +
  theme(legend.background = element_rect(fill = "#f0f1eb", color = "#f0f1eb")) +
  coord_sf(datum = sf::st_crs(5179))

```



## One grid cell, multiple overlaps

```{r}
#| echo: false
#| include: true
#| eval: true
#| fig-align: center
#| crop: true

intersection$area <- round(expanse(intersection)/(1000^2), 3)
ggplot() +
  geom_spatvector(data = intersection[intersection$id==1069,], aes(fill = as.factor(area))) +
  geom_spatvector(data = kgrid[kgrid$id==1069,], fill = NA) +
  scale_fill_brewer("Area of\noverlap\n(sq km)", palette = "Set3") +
  theme_bw() +
  theme(plot.background = element_rect(fill = "#f0f1eb", color = "#f0f1eb")) +
  theme(plot.background = element_rect(fill = "#f0f1eb", color = "#f0f1eb")) +
  theme(legend.background = element_rect(fill = "#f0f1eb", color = "#f0f1eb")) +
  coord_sf(datum = sf::st_crs(5179))

```



## Area of overlap

- So what do we want to do?
  - Let's find the area of overlap for each grid cell and each province/city
  - Then let's take the LARGEST overlap and assign that to the grid cell
  - In practice, depending on the context, you could use a weighted mean or something else
    
```{r}
#| echo: true
#| include: true
#| eval: true
#| fig-align: center
#| crop: true
# Get area of all overlaps
intersection$area <- expanse(intersection)
# turn it into a tibble
intersection <- as_tibble(intersection)
# Get the largest overlap
intersection <- intersection |> 
  group_by(id) |> 
  filter(area==max(area)) |> 
  ungroup()

```



## Area of overlap

    
```{r}
#| echo: true
#| include: true
#| eval: true
#| fig-align: center
#| crop: true
intersection
kgrid
```



## Grids and provinces
```{r}
#| echo: true
#| include: true
#| eval: true
#| fig-align: center
#| crop: true

# same order!
kgrid <- kgrid[match(intersection$id, kgrid$id),]
# double check that it worked
min(intersection$id==kgrid$id)
# now put the province name into the grid
kgrid$CTP_ENG_NM <- intersection$CTP_ENG_NM
```




## Grids and provinces

    
```{r}
#| echo: false
#| include: true
#| eval: true
#| fig-align: center
#| crop: true

# same order!
kgrid <- kgrid[match(intersection$id, kgrid$id),]
kgrid$CTP_ENG_NM <- intersection$CTP_ENG_NM
# also create a continuous value for the province
kgrid$prov <- as.numeric(as.factor(kgrid$CTP_ENG_NM))

ggplot() +
  geom_spatvector(data = kgrid, aes(fill = prov), show.legend = FALSE) +
  scale_fill_distiller("Province", palette = "Spectral") +
  theme_bw() +
  theme(plot.background = element_rect(fill = "#f0f1eb", color = "#f0f1eb")) +
  theme(plot.background = element_rect(fill = "#f0f1eb", color = "#f0f1eb")) +
  theme(legend.background = element_rect(fill = "#f0f1eb", color = "#f0f1eb")) +
  coord_sf(datum = sf::st_crs(5179))
```




## Let's practice

- Getting used to this takes a lot of practice
  - So let's practice together

- Going to use the `mw2.zip` file
  - Just northern Malawi
- Also going to use `mwgrid.zip`
  - Grid cells for northern Malawi
  - We want to know which district each grid cell is in




## Malawi grid

    
```{r}
#| echo: false
#| include: true
#| eval: true
#| fig-align: center
#| crop: true

mwgrid <- vect("week4files/mwgrid.shp")

ggplot() +
  geom_spatvector(data = mwgrid) +
  theme_bw() +
  theme(plot.background = element_rect(fill = "#f0f1eb", color = "#f0f1eb")) +
  theme(plot.background = element_rect(fill = "#f0f1eb", color = "#f0f1eb")) +
  theme(legend.background = element_rect(fill = "#f0f1eb", color = "#f0f1eb"))
```




## Steps

- Load the data
  - Both shapefiles
- Make sure they are in the same CRS
- Intersect them
- Calculate the area of each intersection
  - Find the largest intersection for each grid cell
- Assign the district for the largest intersection to each grid cell
- Plot it!
  - With colors for districts
  
  


## Steps 1 and 2: Load and CRS

```{r}
#| echo: true
#| include: true
#| eval: true
#| fig-align: center
#| crop: true

mwgrid <- vect("week4files/mwgrid.shp")
mw2 <- vect("week4files/mw2.shp")
# just to be safe
mwgrid <- project(mwgrid, crs(mw2))

```



## Step 3: Intersection
    
```{r}
#| echo: true
#| include: true
#| eval: true
#| fig-align: center
#| crop: true

intersection <- intersect(mwgrid, mw2)
dim(mwgrid) # 1,237 features
dim(intersection) # 1,383 features

```



## Step 4: Area (expanse)

```{r}
#| echo: true
#| include: true
#| eval: true
#| fig-align: center
#| crop: true

intersection$area <- expanse(intersection)

# keep largest only
intersection <- intersection |> 
  group_by(id) |> 
  filter(area==max(area)) |> 
  ungroup()

```



## Step 5: Assign district

```{r}
#| echo: true
#| include: true
#| eval: true
#| fig-align: center
#| crop: true
# here's a different way to do it
mwgrid <- mwgrid |>
  arrange(id)
intersection <- intersection |>
  arrange(id)
# double check
min(mwgrid$id==intersection$id)
mwgrid$district <- intersection$DIST_CODE

```



## Step 6: Plot it!

```{r}
#| echo: true
#| include: true
#| eval: false
#| fig-align: center
#| crop: true

ggplot() +
  geom_spatvector(data = mwgrid, aes(fill = as.factor(district))) +
  scale_fill_brewer("District", palette = "Set3") +
  theme_bw()

```



## Step 6: Plot it!

```{r}
#| echo: false
#| include: true
#| eval: true
#| fig-align: center
#| crop: true

ggplot() +
  geom_spatvector(data = mwgrid, aes(fill = as.factor(district))) +
  scale_fill_brewer("District", palette = "Set3") +
  theme_bw() +
  theme(plot.background = element_rect(fill = "#f0f1eb", color = "#f0f1eb")) +
  theme(plot.background = element_rect(fill = "#f0f1eb", color = "#f0f1eb")) +
  theme(legend.background = element_rect(fill = "#f0f1eb", color = "#f0f1eb")) +
  coord_sf(datum = sf::st_crs(4326))

```






## Distances - lines in polygons

- Calculating distances of lines in polygons has a similar workflow

- Can you think about how we'd do this?

. . .

- Steps:
  - Create intersection of lines and polygons of interest
  - Calculate the length of the lines in EACH intersection
  - Aggregate lengths to polygons
  - Join to shapefile



## Lines in polygons

- Let's go back to an example from a few weeks ago: roads in India
  - `indiaprimaryroads.zip`
- Let's figure out the total length of "primary roads" in India districts
  - `india_2011_district.zip`



## Lines in polygons

```{r}
#| echo: true
#| include: true
#| eval: false
#| fig-align: center
#| crop: true

indiaroads <- vect("week4files/indiaprimaryroads.shp")
indiadistricts <- vect("week4files/india_2011_district.shp")

ggplot() +
  geom_spatvector(data = indiaroads, color = "red") +
  geom_spatvector(data = indiadistricts, fill = NA) +
  theme_bw()

```



## Lines in polygons

```{r}
#| echo: false
#| include: true
#| eval: true
#| fig-align: center
#| crop: true

indiaroads <- vect("week4files/indiaprimaryroads.shp")
indiadistricts <- vect("week4files/india_2011_district.shp")

ggplot() +
  geom_spatvector(data = indiaroads, color = "red") +
  geom_spatvector(data = indiadistricts, fill = NA) +
  theme_bw() +
  theme(plot.background = element_rect(fill = "#f0f1eb", color = "#f0f1eb")) +
  theme(plot.background = element_rect(fill = "#f0f1eb", color = "#f0f1eb")) +
  theme(legend.background = element_rect(fill = "#f0f1eb", color = "#f0f1eb")) +
  coord_sf(datum = sf::st_crs(4326))

```



## Calculate intersections

```{r}
#| echo: true
#| include: true
#| eval: true
#| fig-align: center
#| crop: true

# Note: This can take some time
roadsint <- intersect(indiaroads, indiadistricts)

dim(indiaroads)
dim(roadsint)

```

- What function do we use for length?

. . .

```{r}
#| echo: true
#| include: true
#| eval: true
#| fig-align: center
#| crop: true

roadsint$length <- perim(roadsint)
```



## Aggregate to district

- Make sure to use the correct identifier!

```{r}
#| echo: true
#| include: true
#| eval: true
#| fig-align: center
#| crop: true

roadsint <- roadsint |>
  as_tibble() |>
  group_by(cartodb_id) |>
  summarize(length = sum(length)) |>
  ungroup() |>
  # let's put it in km (default is m)
  mutate(length = length/1000)

```

- How do we join it to the shapefile?



## Aggregate to district

```{r}
#| echo: true
#| include: true
#| eval: true
#| fig-align: center
#| crop: true
# need tidyterra for this!
indiadistricts <- indiadistricts |>
  left_join(roadsint, by = "cartodb_id")
# if missing? zero!
indiadistricts$length <- ifelse(is.na(indiadistricts$length), 0, indiadistricts$length)

# small note: you can also merge using terra::merge
# indiadistricts <- merge(indiadistricts, roadsint, by.x = c("cartodb_id"), by.y = c("cartodb_id"))

```



## And plot it

```{r}
#| echo: true
#| include: true
#| eval: false
#| fig-align: center
#| crop: true

ggplot() + 
  geom_spatvector(data = indiadistricts, aes(fill = length)) +
  scale_fill_distiller("Length of\nprimary roads\n(km)", palette = "Spectral") +
  theme_bw()

```



## And plot it

```{r}
#| echo: false
#| include: true
#| eval: true
#| fig-align: center
#| crop: true

ggplot() + 
  geom_spatvector(data = indiadistricts, aes(fill = length)) +
  scale_fill_distiller("Length of\nprimary roads\n(km)", palette = "Spectral") +
  theme_bw() +
  theme(plot.background = element_rect(fill = "#f0f1eb", color = "#f0f1eb")) +
  theme(plot.background = element_rect(fill = "#f0f1eb", color = "#f0f1eb")) +
  theme(legend.background = element_rect(fill = "#f0f1eb", color = "#f0f1eb"))

```




## Buffers

```{r}
#| echo: false
#| include: true
#| eval: true
#| fig-align: center
#| crop: true

plants <- vect("week4files/plants.shp")
# create buffer
plantsbuffer <- buffer(plants, 50000)
ggplot() + 
  geom_spatvector(data = plantsbuffer, fill = "black", alpha = 0.5) +
  geom_spatvector(data = indiadistricts, fill = NA, color = "gray") +
  theme_bw() +
  theme(plot.background = element_rect(fill = "#f0f1eb", color = "#f0f1eb")) +
  theme(plot.background = element_rect(fill = "#f0f1eb", color = "#f0f1eb")) +
  theme(legend.background = element_rect(fill = "#f0f1eb", color = "#f0f1eb"))

```








## Buffers


- I've used buffers for many things in the past!

- The previous map shows coal plants in India
  - I've created a buffer of 50 km around each plant
  
- What might we want to do with this buffer?




## Buffers

- Creating buffers is straightforward!
  - Let's use the `plants.zip` file

<br>

```{r}
#| echo: true
#| include: true
#| eval: false
#| fig-align: center
#| crop: true

plants <- vect("week4files/plants.shp")
# create buffer
plantsbuffer <- buffer(plants, 50000)
ggplot() + 
  geom_spatvector(data = plantsbuffer, fill = "black", alpha = 0.5) +
  geom_spatvector(data = indiadistricts, fill = NA, color = "gray") +
  theme_bw()

```





## Practice!

- Time to practice again!

- I'd like you to find the length of roads within 50 km of each coal plant in India
  - Use the `indiaprimaryroads.zip` file
  - Use the `plants.zip` file




## Step 1

```{r}
#| echo: true
#| include: true
#| eval: true
#| fig-align: center
#| crop: true

plants <- vect("week4files/plants.shp")
# create buffer
plantsbuffer <- buffer(plants, 50000)

# roads
indiaroads <- vect("week4files/indiaprimaryroads.shp")
indiaroads <- project(indiaroads, crs(plants))
# intersection
roadsint <- intersect(indiaroads, plantsbuffer)

```




## Step 2

```{r}
#| echo: true
#| include: true
#| eval: true
#| fig-align: center
#| crop: true

roadsint$area <- perim(roadsint)
roadsint <- as_tibble(roadsint) |>
  group_by(unit_id) |>
  summarize(length = sum(area)) |>
  ungroup()

plantsbuffer <- plantsbuffer |>
  left_join(roadsint, by = c("unit_id"))
```




## Plot it!

```{r}
#| echo: true
#| include: true
#| eval: false
#| fig-align: center
#| crop: true

ggplot() + 
  geom_spatvector(data = plantsbuffer, aes(fill = length/1000)) +
  geom_spatvector(data = indiadistricts, fill = NA, color = "gray", alpha = 0.5) +
  scale_fill_distiller("Length of\nprimary roads\n(km)", palette = "Spectral") +
  theme_bw()
```




## Plot it!

```{r}
#| echo: false
#| include: true
#| eval: true
#| fig-align: center
#| crop: true

ggplot() + 
  geom_spatvector(data = plantsbuffer, aes(fill = length/1000)) +
  geom_spatvector(data = indiadistricts, fill = NA, color = "gray", alpha = 0.5) +
  scale_fill_distiller("Length of\nprimary roads\n(km)", palette = "Spectral") +
  theme_bw() +
  theme(plot.background = element_rect(fill = "#f0f1eb", color = "#f0f1eb")) +
  theme(plot.background = element_rect(fill = "#f0f1eb", color = "#f0f1eb")) +
  theme(legend.background = element_rect(fill = "#f0f1eb", color = "#f0f1eb"))
```









## Back to our Voronoi diagram

- We want to use `intersect()` to only show the areas of the country (and not the entire bounding box)
  - We'll use the `mw3` and `voronoi` objects









## Back to our Voronoi diagram

```{r}
#| echo: true
#| include: true
#| eval: true
#| fig-align: center
#| crop: true

# mw3
mw3 <- vect("week4files/mw3allcountry.shp")
# first aggregate to ID_1
mw3 <- aggregate(mw3, "ID_1")
# create centroids
mw3centroids <- centroids(mw3)
# now aggregate mw3 to country level
mw3 <- aggregate(mw3)
# bnd stands for "boundary"
voronoi <- voronoi(mw3centroids, bnd = mw3)
# why did I do it this way?
voronoi <- intersect(voronoi, mw3)

```









## Back to our Voronoi diagram

```{r}
#| echo: false
#| include: true
#| eval: true
#| fig-align: center
#| crop: true

ggplot() +
  geom_spatvector(data = voronoi) +
  geom_spatvector(data = mw3centroids) +
  theme_bw() +
  theme(plot.background = element_rect(fill = "#f0f1eb", color = "#f0f1eb")) +
  theme(plot.background = element_rect(fill = "#f0f1eb", color = "#f0f1eb")) +
  theme(legend.background = element_rect(fill = "#f0f1eb", color = "#f0f1eb"))

```









## Your turn

- Please create a Voronoi diagram for coal plants in India









## Back to our Voronoi diagram

```{r}
#| echo: true
#| include: true
#| eval: true
#| fig-align: center
#| crop: true

# plants
plants <- vect("week4files/plants.shp")
# districts
indiadistricts <- vect("week4files/india_2011_district.shp")
indiadistricts <- project(indiadistricts, crs(plants))
# aggregate to india
india <- aggregate(indiadistricts)
# bnd stands for "boundary"
voronoi <- voronoi(plants, bnd = india)
# why did I do it this way?
voronoi <- intersect(voronoi, india)

```









## Back to our Voronoi diagram

```{r}
#| echo: false
#| include: true
#| eval: true
#| fig-align: center
#| crop: true

ggplot() +
  geom_spatvector(data = voronoi) +
  geom_spatvector(data = plants, size = 0.5) +
  theme_bw() +
  theme(plot.background = element_rect(fill = "#f0f1eb", color = "#f0f1eb")) +
  theme(plot.background = element_rect(fill = "#f0f1eb", color = "#f0f1eb")) +
  theme(legend.background = element_rect(fill = "#f0f1eb", color = "#f0f1eb"))

```






## Extract

- Some bad news: we've been doing some of this the hard way!
  - It was good practice, though.
  
- For points, in particular, there's a much easier way to extract information about polygons
  - The `extract` function






## Extract

```{r}
#| echo: true
#| include: true
#| eval: true
#| fig-align: center
#| crop: true

# plants
plants <- vect("week4files/plants.shp")
# districts
indiadistricts <- vect("week4files/india_2011_district.shp")
indiadistricts <- project(indiadistricts, crs(plants))
# note the order! 
plantsextract <- extract(indiadistricts, plants)
plants <- cbind(plants, plantsextract)
plants
```








# Class exercise

## Class exercise

- Household data: `households.dta`
- Hospitals: `hospitals.csv`

- Tasks:
  - Find number of hospitals within 25km of each household
  - Create Voronoi polygons for hospitals
    - Only show the polygons within the country











  

