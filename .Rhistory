#| crop: true
#| class-output: .hscroll
colnames(pm)
#| echo: true
#| eval: true
#| crop: true
#| class-output: .hscroll
# note the syntax here!
pm <- pm |>
select(siteid = `Site ID`, date, pm25 = `Daily Mean PM2.5 Concentration`,
AQI = `Daily AQI Value`, lon = `Site Longitude`, lat = `Site Latitude`)
pm
#| echo: true
#| eval: true
#| crop: true
#| class-output: .hscroll
pm <- vect(pm, geom = c("lon", "lat"), crs = "EPSG:4326")
pm
#| echo: false
#| eval: true
#| crop: true
#| fig-align: center
ga <- vect("week8files/tl_2020_13_tract.shp")
# make sure it's the same crs
ga <- project(ga, crs(pm))
ggplot() +
geom_spatvector(data = ga, lwd = 0.05, color = "gray", fill = NA) +
geom_spatvector(data = pm |> filter(month(date)==1), color = "red") +
theme_bw() +
theme(plot.background = element_rect(fill = "#f0f1eb", color = "#f0f1eb")) +
theme(legend.background = element_rect(fill = "#f0f1eb", color = "#f0f1eb"))
#| echo: false
#| eval: true
#| crop: true
#| fig-align: center
# keep one observation per station
pmunique <- pm |>
group_by(siteid) |>
filter(row_number() == 1) |>
ungroup()
voronoiga <- voronoi(pmunique, bnd = ga)
ggplot() +
geom_spatvector(data = ga, lwd = 0.05, color = "gray", fill = NA) +
geom_spatvector(data = voronoiga, lwd = 0.05, color = "blue", fill = NA) +
geom_spatvector(data = pm |> filter(month(date)==1), color = "red") +
theme_bw() +
theme(plot.background = element_rect(fill = "#f0f1eb", color = "#f0f1eb")) +
theme(legend.background = element_rect(fill = "#f0f1eb", color = "#f0f1eb"))
#| echo: true
#| eval: true
#| crop: true
#| fig-align: center
# keep one observation per station
pmmonth <- pm |>
filter(month(date)==1) |>
group_by(siteid) |>
summarize(pm25 = mean(pm25, na.rm = TRUE), .groups = "drop")
#| echo: true
#| eval: true
#| crop: true
#| fig-align: center
# Intersection
vorintersect <- intersect(ga, voronoiga)
# find area
vorintersect$area <- expanse(vorintersect)
# group by GEOID and find largest value
vorintersect <- vorintersect |>
group_by(GEOID) |>
filter(area==max(area)) |>
ungroup() |>
# now keep just the site id and geoid
select(GEOID, siteid) |>
as_tibble()
#| echo: false
#| eval: true
#| crop: true
#| fig-align: center
vorintersect <- vorintersect |>
left_join(as_tibble(pmmonth), by = "siteid")
gamonth <- ga |>
left_join(vorintersect, by = "GEOID")
ggplot() +
geom_spatvector(data = gamonth, aes(fill = pm25), color = NA) +
scale_fill_distiller("PM 2.5\n(Jan. 2020)", palette = "Spectral") +
theme_bw() +
theme(plot.background = element_rect(fill = "#f0f1eb", color = "#f0f1eb")) +
theme(legend.background = element_rect(fill = "#f0f1eb", color = "#f0f1eb"))
#| echo: false
#| eval: true
#| crop: true
#| fig-align: center
# create centroids
gacentroids <- centroids(ga)
#intersect
vorcentroids <- intersect(gacentroids, voronoiga)
# create new gamonth
gamonth <- ga |>
mutate(siteid = vorcentroids$siteid)
gamonth <- gamonth |>
left_join(as_tibble(pmmonth), by = "siteid")
ggplot() +
geom_spatvector(data = gamonth, aes(fill = pm25), color = NA) +
scale_fill_distiller("PM 2.5\n(Jan. 2020)", palette = "Spectral") +
theme_bw() +
theme(plot.background = element_rect(fill = "#f0f1eb", color = "#f0f1eb")) +
theme(legend.background = element_rect(fill = "#f0f1eb", color = "#f0f1eb"))
#| echo: true
#| eval: true
#| crop: true
#| fig-align: center
# new points
grid <- centroids(ga)
# Note: how I convert to sf inside the call!
# Note: idp is the "beta" from above
grid <- idw(pmmonth$pm25 ~ 1, sf::st_as_sf(pmmonth),
newdata = sf::st_as_sf(grid), idp = 1)
grid
#| echo: true
#| eval: true
#| crop: true
#| fig-align: center
gamonth$idwbeta1 <- grid$var1.pred
#| echo: false
#| eval: true
#| crop: true
#| fig-align: center
#| message: false
grid <- centroids(ga)
# Note: how I convert to sf inside the call!
# Note: idp is the "beta" from above
grid2 <- idw(pmmonth$pm25 ~ 1, sf::st_as_sf(pmmonth), newdata = sf::st_as_sf(grid), idp = 2)
gamonth$idwbeta2 <- grid2$var1.pred
# Note: how I convert to sf inside the call!
# Note: idp is the "beta" from above
grid3 <- idw(pmmonth$pm25 ~ 1, sf::st_as_sf(pmmonth), newdata = sf::st_as_sf(grid), idp = 3)
gamonth$idwbeta3 <- grid3$var1.pred
g1 <- ggplot() +
geom_spatvector(data = gamonth, aes(fill = idwbeta1), color = NA, show.legend = FALSE) +
scale_fill_distiller("PM 2.5\n(Jan. 2020)", palette = "Spectral") +
labs(subtitle = expression("Panel A: "~beta~" = 1")) +
theme_bw() +
theme(plot.background = element_rect(fill = "#f0f1eb", color = "#f0f1eb")) +
theme(legend.background = element_rect(fill = "#f0f1eb", color = "#f0f1eb"))
g2 <- ggplot() +
geom_spatvector(data = gamonth, aes(fill = idwbeta2), color = NA, show.legend = FALSE) +
scale_fill_distiller("PM 2.5\n(Jan. 2020)", palette = "Spectral") +
labs(subtitle = expression("Panel B: "~beta~" = 2")) +
theme_bw() +
theme(plot.background = element_rect(fill = "#f0f1eb", color = "#f0f1eb")) +
theme(legend.background = element_rect(fill = "#f0f1eb", color = "#f0f1eb"))
g3 <- ggplot() +
geom_spatvector(data = gamonth, aes(fill = idwbeta3), color = NA, show.legend = FALSE) +
scale_fill_distiller("PM 2.5\n(Jan. 2020)", palette = "Spectral") +
labs(subtitle = expression("Panel C: "~beta~" = 3")) +
theme_bw() +
theme(plot.background = element_rect(fill = "#f0f1eb", color = "#f0f1eb")) +
theme(legend.background = element_rect(fill = "#f0f1eb", color = "#f0f1eb"))
plot_grid(g1, g2, g3, ncol = 3) +
theme(plot.background = element_rect(fill = "#f0f1eb", color = "#f0f1eb")) +
theme(legend.background = element_rect(fill = "#f0f1eb", color = "#f0f1eb"))
#| echo: false
#| eval: true
#| crop: true
#| fig-align: center
#| message: false
grid <- centroids(ga)
grid <- idw(pmmonth$pm25 ~ 1, sf::st_as_sf(pmmonth), newdata = sf::st_as_sf(grid), nmax = 1)
gamonth$idwbetavor <- grid$var1.pred
ggplot() +
geom_spatvector(data = gamonth, aes(fill = idwbetavor), color = NA, show.legend = FALSE) +
scale_fill_distiller("PM 2.5\n(Jan. 2020)", palette = "Spectral") +
theme_bw() +
theme(plot.background = element_rect(fill = "#f0f1eb", color = "#f0f1eb")) +
theme(legend.background = element_rect(fill = "#f0f1eb", color = "#f0f1eb"))
#| echo: false
#| eval: true
#| crop: true
#| fig-align: center
#| message: false
grid <- centroids(ga)
grid2 <- idw(pmmonth$pm25 ~ 1, sf::st_as_sf(pmmonth), newdata = sf::st_as_sf(grid), nmax = 2)
grid3 <- idw(pmmonth$pm25 ~ 1, sf::st_as_sf(pmmonth), newdata = sf::st_as_sf(grid), nmax = 10)
gamonth$idwbetavor2 <- grid2$var1.pred
gamonth$idwbetavor3 <- grid3$var1.pred
g1 <- ggplot() +
geom_spatvector(data = gamonth, aes(fill = idwbetavor), color = NA, show.legend = FALSE) +
scale_fill_distiller("PM 2.5\n(Jan. 2020)", palette = "Spectral") +
labs(subtitle = "Panel A: 1 neighbor") +
theme_bw() +
theme(plot.background = element_rect(fill = "#f0f1eb", color = "#f0f1eb")) +
theme(legend.background = element_rect(fill = "#f0f1eb", color = "#f0f1eb"))
g2 <- ggplot() +
geom_spatvector(data = gamonth, aes(fill = idwbetavor2), color = NA, show.legend = FALSE) +
scale_fill_distiller("PM 2.5\n(Jan. 2020)", palette = "Spectral") +
labs(subtitle = "Panel B: 2 neighbors") +
theme_bw() +
theme(plot.background = element_rect(fill = "#f0f1eb", color = "#f0f1eb")) +
theme(legend.background = element_rect(fill = "#f0f1eb", color = "#f0f1eb"))
g3 <- ggplot() +
geom_spatvector(data = gamonth, aes(fill = idwbetavor3), color = NA, show.legend = FALSE) +
scale_fill_distiller("PM 2.5\n(Jan. 2020)", palette = "Spectral") +
labs(subtitle = "Panel C: 10 neighbors") +
theme_bw() +
theme(plot.background = element_rect(fill = "#f0f1eb", color = "#f0f1eb")) +
theme(legend.background = element_rect(fill = "#f0f1eb", color = "#f0f1eb"))
plot_grid(g1, g2, g3, ncol = 3) +
theme(plot.background = element_rect(fill = "#f0f1eb", color = "#f0f1eb")) +
theme(legend.background = element_rect(fill = "#f0f1eb", color = "#f0f1eb"))
library(rayshader)
g1 <- ggplot() +
geom_spatvector(data = gamonth, aes(fill = idwbeta1), color = NA) +
scale_fill_distiller("PM 2.5", palette = "Spectral") +
theme_bw() +
theme(plot.background = element_rect(fill = "#f0f1eb", color = "#f0f1eb")) +
theme(legend.background = element_rect(fill = "#f0f1eb", color = "#f0f1eb"))
par(mfrow = c(1, 1))
plot_gg(g1, multicore = TRUE, theta = 10, phi = 55, shadow = FALSE, preview = TRUE, scale = 300, width = 7)
Sys.sleep(0.2)
render_snapshot()
devtools::install_github("h-a-graham/rayvista", dependencies=TRUE)
remotes::install_github(
"tylermorganwall/rayshader"
)
library(tidyverse)
library(terra)
library(tidyterra)
library(cowplot)
library(kableExtra)
kdisgreen <- "#006334"
accent <- "#340063"
accent2 <- "#633400"
kdisgray <- "#A7A9AC"
temp <- readRDS("/Users/Josh/Dropbox/Papers/coal_transformation/data/shrid2_clean_pc.RDS")
head(temp)
temp <- vect(temp)
temp
temp |> filter(substr(shrid2, 4, 5)=="02")
temp |> filter(substr(shrid2, 4, 5)=="03")
temp |> filter(substr(shrid2, 4, 5)=="01")
temp2 <- temp |> filter(substr(shrid2, 4, 5)=="01")
ggplot() + geom_spatvector(data = temp2)
temp2 <- temp |> filter(substr(shrid2, 4, 5)=="03")
ggplot() + geom_spatvector(data = temp2)
temp2 <- temp |> filter(substr(shrid2, 4, 5)=="05")
temp2
ggplot() + geom_spatvector(data = temp2)
temp2 <- temp |> filter(substr(shrid2, 4, 5)=="06")
temp2
ggplot() + geom_spatvector(data = temp2)
temp2 <- temp2[,c(1, 2, 9:ncol(temp2))]
temp2
colnames(temp2)
table(temp2$year)
names(temp2)
setwd("~/Dropbox/KDIS/Classes/geospatialdataR")
writeVector(temp2, "week9files/villages.shp")
#| label: setup
#| include: false
knitr::knit_hooks$set(crop = knitr::hook_pdfcrop)
library(tidyverse)
library(terra)
library(tidyterra)
library(cowplot)
library(kableExtra)
kdisgreen <- "#006334"
accent <- "#340063"
accent2 <- "#633400"
kdisgray <- "#A7A9AC"
# Haryana villages
villages <- vect("week9files/villages.shp")
villages
names(villages)
# let's look at pca_p_lit (literate population)
villages$literate <- villages$pca_p_lit/villages$pca_tot_p
summary(villages$literate)
table(villages$year)
villages <- villages |>
group_by(shrid2) |>
arrange(shrid2, year) |>
mutate(lit_lag = lag(literate)) |>
ungroup()
villages
#| label: setup
#| include: false
knitr::knit_hooks$set(crop = knitr::hook_pdfcrop)
library(tidyverse)
library(terra)
library(tidyterra)
library(cowplot)
library(kableExtra)
kdisgreen <- "#006334"
accent <- "#340063"
accent2 <- "#633400"
kdisgray <- "#A7A9AC"
theme_set(theme_bw() +
theme(plot.background = element_rect(fill = "#f0f1eb", color = "#f0f1eb")) +
theme(legend.background = element_rect(fill = "#f0f1eb", color = "#f0f1eb")))
# Haryana villages
#| eval: false
ggplot() +
geom_point(data = as_tibble(villages), aes(x = literate, y = lit_lag, color = year)) +
theme_bw()
#| eval: false
ggplot() +
geom_point(data = as_tibble(villages), aes(x = literate, y = lit_lag, color = as.factor(year))) +
theme_bw()
#| eval: false
ggplot() +
geom_point(data = as_tibble(villages) |> filter(year>1991), aes(x = literate, y = lit_lag, color = as.factor(year))) +
theme_bw()
#| eval: false
ggplot() +
geom_point(data = as_tibble(villages) |> filter(year>1991), aes(x = literate, y = lit_lag, color = as.factor(year))) +
scale_color_brewer("Year", palette = "Set1") +
theme_bw()
#| eval: false
ggplot() +
geom_point(data = as_tibble(villages) |> filter(year>1991), aes(x = literate, y = lit_lag, color = as.factor(year))) +
scale_color_brewer("Year") +
theme_bw()
#| eval: false
ggplot() +
geom_point(data = as_tibble(villages) |> filter(year>1991), aes(x = literate, y = lit_lag, color = as.factor(year))) +
scale_color_brewer("Year", palette = "Set2") +
theme_bw()
#| eval: false
ggplot() +
geom_point(data = as_tibble(villages) |> filter(year>1991),
aes(x = literate, y = lit_lag, color = as.factor(year))) +
scale_color_brewer("Year", palette = "Set2") +
labs(x = "Literacy", y = "Lagged literacy") +
geom_abline(intercept = 0, slope = 1, linetype = "dashed")
cor(villages$literate, villages$lit_lag, use = "pairwise.complete.obs")
mat <- adjacent(villages, symmetrical = TRUE)
villagessmall <- vect("week9files/villagessmall.shp")
# let's also just use 2001
villagessmall <- villagessmall[villagessmall$year==2001,]
villagessmall
mat <- adjacent(villagessmall, symmetrical = TRUE)
mat
p1 <- xy[mat[,1],]
points1 <- xy[mat[,1],]
xy <- centroids(villagessmall)
points1 <- xy[mat[,1],]
points2 <- xy[mat[,2],]
points1
ines(p1, p2, col='red', lwd=2)
lines(p1, p2, col='red', lwd=2)
lines(points1, points2, col='red', lwd=2)
xy <- sf::st_centroids(villagessmall)
xy <- sf::st_centroid(villagessmall)
xy <- centroids(villagessmall)
points1 <- geom(xy[mat[,1],])[,c("x", "y")]
points2 <- geom(xy[mat[,2],])[,c("x", "y")]
points1
ggplot() +
geom_spatvector(data = villagessmall, fill = NA) +
geom_line(aes(x = points1$x, y = points1$y, xend = points2$x, yend = points2$y), color = "red")
xy <- centroids(villagessmall)
points1 <- geom(xy[mat[,1],])[,c("x", "y")]
points2 <- geom(xy[mat[,2],])[,c("x", "y")]
ggplot() +
geom_spatvector(data = villagessmall, fill = NA) +
geom_line(aes(x = points1$x, y = points1$y, xend = points2$x, yend = points2$y), color = "red")
ggplot() +
geom_spatvector(data = villagessmall, fill = NA) +
geom_abline(aes(x = points1$x, y = points1$y, xend = points2$x, yend = points2$y), color = "red")
points1 <- xy[mat[,1],]
points2 <- xy[mat[,2],]
points1 <- geom(xy[mat[,1],])[,c("x", "y")]
points2 <- geom(xy[mat[,2],])[,c("x", "y")]
ggplot() +
geom_abline(aes(x = points1$x, y = points1$y, xend = points2$x, yend = points2$y), color = "red")
?geom_abline
ggplot() +
geom_spatvector(data = villagessmall, fill = NA) +
geom_abline(aes(xstart = points1$x, ystart = points1$y, xend = points2$x, yend = points2$y), color = "red")
ggplot() +
geom_abline(aes(xstart = points1$x, ystart = points1$y, xend = points2$x, yend = points2$y), color = "red")
ggplot() +
geom_spatvector(data = villagessmall, fill = NA)
ggplot() +
geom_spatvector(data = villagessmall, fill = NA) +
geom_spatvector(data = xy, color = "red")
ggplot() +
geom_spatvector(data = villagessmall, fill = NA) +
geom_spatvector(data = xy, color = "red", size = 0.5)
ggplot() +
geom_abline(xstart = points1$x, ystart = points1$y, xend = points2$x, yend = points2$y, color = "red")
points1
ggplot() +
geom_abline(xstart = points1$x[1], ystart = points1$y[1], xend = points2$x[1], yend = points2$y[1], color = "red")
ggplot() +
geom_segment(data = coefmat, aes(x = points1$x, y = points1$y, xend = points2$x, yend = points2$y), color = "red")
ggplot() +
geom_segment(aes(x = points1$x, y = points1$y, xend = points2$x, yend = points2$y), color = "red")
points1
points1
points1$x
points1 <- as_tibble(geom(xy[mat[,1],])[,c("x", "y")])
points2 <- as_tibble(geom(xy[mat[,2],])[,c("x", "y")])
points1
points1$x
ggplot() +
geom_segment(aes(x = points1$x, y = points1$y, xend = points2$x, yend = points2$y), color = "red")
ggplot() +
geom_spatvector(data = villagessmall, fill = NA) +
geom_spatvector(data = xy, color = "red", size = 0.5) +
geom_segment(aes(x = points1$x, y = points1$y, xend = points2$x, yend = points2$y), color = "red")
ggplot() +
geom_spatvector(data = villagessmall, fill = NA) +
geom_spatvector(data = xy, color = "red", size = 0.5) +
geom_segment(aes(x = points1$x, y = points1$y, xend = points2$x, yend = points2$y), color = "red", size = 0.5)
ggplot() +
geom_spatvector(data = villagessmall, fill = NA) +
geom_spatvector(data = xy, color = "red", size = 0.5) +
geom_segment(aes(x = points1$x, y = points1$y, xend = points2$x, yend = points2$y), color = "red", linewidth = 0.5)
ggplot() +
geom_spatvector(data = villagessmall, fill = NA) +
geom_spatvector(data = xy, color = "red", size = 0.5) +
geom_segment(aes(x = points1$x, y = points1$y, xend = points2$x, yend = points2$y), color = "red", lwd = 0.5)
ggplot() +
geom_spatvector(data = villagessmall, fill = NA) +
geom_spatvector(data = xy, color = "red", size = 0.5) +
geom_segment(aes(x = points1$x, y = points1$y, xend = points2$x, yend = points2$y), color = "red", lwd = 0.5)
villagessmall <- vect("week9files/villagessmall.shp")
# let's also just use 2001
villagessmall <- villagessmall[villagessmall$year==2001,]
mat <- adjacent(villagessmall, symmetrical = TRUE)
mat <- adjacent(villagessmall, symmetrical = TRUE)
head(mat)
xy <- centroids(villagessmall[villagessmall$year==2001,])
points1 <- as_tibble(geom(xy[mat[,1],])[,c("x", "y")])
points2 <- as_tibble(geom(xy[mat[,2],])[,c("x", "y")])
ggplot() +
geom_spatvector(data = villagessmall, fill = NA) +
geom_spatvector(data = xy, color = "red", size = 0.5) +
geom_segment(aes(x = points1$x, y = points1$y, xend = points2$x, yend = points2$y), color = "red", lwd = 0.5)
ggplot() +
geom_spatvector(data = villagessmall, fill = NA) +
geom_spatvector(data = xy, color = "red", size = 0.5) +
geom_segment(aes(x = points1$x, y = points1$y, xend = points2$x, yend = points2$y), color = "red", lwd = 0.1)
ggplot() +
geom_spatvector(data = villagessmall, fill = NA) +
geom_spatvector(data = xy, color = "red", size = 0.5) +
geom_segment(aes(x = points1$x, y = points1$y, xend = points2$x, yend = points2$y), color = "red", lwd = 0.1) +
labs(x = "", y = "")
?adjacent
mat <- adjacent(villagessmall, symmetrical = TRUE, directions = "queen")
villagessmall <- vect("week9files/villagessmall.shp")
# let's also just use 2001
villagessmall <- villagessmall[villagessmall$year==2001,]
mat <- adjacent(villagessmall, symmetrical = TRUE, directions = "queen")
mat <- adjacent(villagessmall, symmetrical = TRUE, type = "queen")
mat <- adjacent(villagessmall, symmetrical = TRUE, type = "queen")
head(mat)
xy <- centroids(villagessmall[villagessmall$year==2001,])
points1 <- as_tibble(geom(xy[mat[,1],])[,c("x", "y")])
points2 <- as_tibble(geom(xy[mat[,2],])[,c("x", "y")])
ggplot() +
geom_spatvector(data = villagessmall, fill = NA) +
geom_spatvector(data = xy, color = "red", size = 0.5) +
geom_segment(aes(x = points1$x, y = points1$y, xend = points2$x, yend = points2$y), color = "red", lwd = 0.1) +
labs(x = "", y = "")
villagessmall <- vect("week9files/villagessmall.shp")
# let's also just use 2001
villagessmall <- villagessmall[villagessmall$year==2001,]
mat <- adjacent(villagessmall, symmetrical = TRUE, type = "touches")
head(mat)
xy <- centroids(villagessmall[villagessmall$year==2001,])
points1 <- as_tibble(geom(xy[mat[,1],])[,c("x", "y")])
points2 <- as_tibble(geom(xy[mat[,2],])[,c("x", "y")])
ggplot() +
geom_spatvector(data = villagessmall, fill = NA) +
geom_spatvector(data = xy, color = "red", size = 0.5) +
geom_segment(aes(x = points1$x, y = points1$y, xend = points2$x, yend = points2$y), color = "red", lwd = 0.1) +
labs(x = "", y = "")
villagessmall <- vect("week9files/villagessmall.shp")
# let's also just use 2001
villagessmall <- villagessmall[villagessmall$year==2001,]
mat <- adjacent(villagessmall, symmetrical = TRUE, type = "touches")
head(mat)
villagessmall <- vect("week9files/villagessmall.shp")
# let's also just use 2001
villagessmall <- villagessmall[villagessmall$year==2001,]
villagessmall <- vect("week9files/villagessmall.shp")
# let's also just use 2001
villagessmall <- villagessmall[villagessmall$year==2001,]
mat <- adjacent(villagessmall, symmetrical = TRUE, type = "touches")
head(mat)
xy <- centroids(villagessmall[villagessmall$year==2001,])
points1 <- as_tibble(geom(xy[mat[,1],])[,c("x", "y")])
points2 <- as_tibble(geom(xy[mat[,2],])[,c("x", "y")])
ggplot() +
geom_spatvector(data = villagessmall, fill = NA) +
geom_spatvector(data = xy, color = "red", size = 0.5) +
geom_segment(aes(x = points1$x, y = points1$y, xend = points2$x, yend = points2$y), color = "red", lwd = 0.1) +
labs(x = "", y = "")
ggplot() +
geom_spatvector(data = villagessmall, fill = NA) +
geom_spatvector(data = xy, color = kdisgreen, size = 0.5) +
geom_segment(aes(x = points1$x, y = points1$y, xend = points2$x, yend = points2$y), color = kdisgreen, lwd = 0.1) +
labs(x = "", y = "")
ggplot() +
geom_spatvector(data = villagessmall, fill = NA, color = kdisgray) +
geom_spatvector(data = xy, color = kdisgreen, size = 0.5) +
geom_segment(aes(x = points1$x, y = points1$y, xend = points2$x, yend = points2$y), color = kdisgreen, lwd = 0.1) +
labs(x = "", y = "")
mat <- adjacent(villagessmall, pairs = FALSE, type = "touches")
head(mat)
dim(mat)
villagessmall
