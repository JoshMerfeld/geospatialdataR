#| eval: true
#| crop: true
#| fig-align: center
# keep one observation per station
pmmonth <- pm |>
filter(month(date)==1) |>
group_by(siteid) |>
summarize(pm25 = mean(pm25, na.rm = TRUE), .groups = "drop")
#| echo: true
#| eval: true
#| crop: true
#| fig-align: center
# Intersection
vorintersect <- intersect(ga, voronoiga)
# find area
vorintersect$area <- expanse(vorintersect)
# group by GEOID and find largest value
vorintersect <- vorintersect |>
group_by(GEOID) |>
filter(area==max(area)) |>
ungroup() |>
# now keep just the site id and geoid
select(GEOID, siteid) |>
as_tibble()
#| echo: false
#| eval: true
#| crop: true
#| fig-align: center
vorintersect <- vorintersect |>
left_join(as_tibble(pmmonth), by = "siteid")
gamonth <- ga |>
left_join(vorintersect, by = "GEOID")
ggplot() +
geom_spatvector(data = gamonth, aes(fill = pm25), color = NA) +
scale_fill_distiller("PM 2.5\n(Jan. 2020)", palette = "Spectral") +
theme_bw() +
theme(plot.background = element_rect(fill = "#f0f1eb", color = "#f0f1eb")) +
theme(legend.background = element_rect(fill = "#f0f1eb", color = "#f0f1eb"))
#| echo: false
#| eval: true
#| crop: true
#| fig-align: center
# create centroids
gacentroids <- centroids(ga)
#intersect
vorcentroids <- intersect(gacentroids, voronoiga)
# create new gamonth
gamonth <- ga |>
mutate(siteid = vorcentroids$siteid)
gamonth <- gamonth |>
left_join(as_tibble(pmmonth), by = "siteid")
ggplot() +
geom_spatvector(data = gamonth, aes(fill = pm25), color = NA) +
scale_fill_distiller("PM 2.5\n(Jan. 2020)", palette = "Spectral") +
theme_bw() +
theme(plot.background = element_rect(fill = "#f0f1eb", color = "#f0f1eb")) +
theme(legend.background = element_rect(fill = "#f0f1eb", color = "#f0f1eb"))
#| echo: true
#| eval: true
#| crop: true
#| fig-align: center
# new points
grid <- centroids(ga)
# Note: how I convert to sf inside the call!
# Note: idp is the "beta" from above
grid <- idw(pmmonth$pm25 ~ 1, sf::st_as_sf(pmmonth),
newdata = sf::st_as_sf(grid), idp = 1)
grid
#| echo: true
#| eval: true
#| crop: true
#| fig-align: center
gamonth$idwbeta1 <- grid$var1.pred
#| echo: false
#| eval: true
#| crop: true
#| fig-align: center
#| message: false
grid <- centroids(ga)
# Note: how I convert to sf inside the call!
# Note: idp is the "beta" from above
grid2 <- idw(pmmonth$pm25 ~ 1, sf::st_as_sf(pmmonth), newdata = sf::st_as_sf(grid), idp = 2)
gamonth$idwbeta2 <- grid2$var1.pred
# Note: how I convert to sf inside the call!
# Note: idp is the "beta" from above
grid3 <- idw(pmmonth$pm25 ~ 1, sf::st_as_sf(pmmonth), newdata = sf::st_as_sf(grid), idp = 3)
gamonth$idwbeta3 <- grid3$var1.pred
g1 <- ggplot() +
geom_spatvector(data = gamonth, aes(fill = idwbeta1), color = NA, show.legend = FALSE) +
scale_fill_distiller("PM 2.5\n(Jan. 2020)", palette = "Spectral") +
labs(subtitle = expression("Panel A: "~beta~" = 1")) +
theme_bw() +
theme(plot.background = element_rect(fill = "#f0f1eb", color = "#f0f1eb")) +
theme(legend.background = element_rect(fill = "#f0f1eb", color = "#f0f1eb"))
g2 <- ggplot() +
geom_spatvector(data = gamonth, aes(fill = idwbeta2), color = NA, show.legend = FALSE) +
scale_fill_distiller("PM 2.5\n(Jan. 2020)", palette = "Spectral") +
labs(subtitle = expression("Panel B: "~beta~" = 2")) +
theme_bw() +
theme(plot.background = element_rect(fill = "#f0f1eb", color = "#f0f1eb")) +
theme(legend.background = element_rect(fill = "#f0f1eb", color = "#f0f1eb"))
g3 <- ggplot() +
geom_spatvector(data = gamonth, aes(fill = idwbeta3), color = NA, show.legend = FALSE) +
scale_fill_distiller("PM 2.5\n(Jan. 2020)", palette = "Spectral") +
labs(subtitle = expression("Panel C: "~beta~" = 3")) +
theme_bw() +
theme(plot.background = element_rect(fill = "#f0f1eb", color = "#f0f1eb")) +
theme(legend.background = element_rect(fill = "#f0f1eb", color = "#f0f1eb"))
plot_grid(g1, g2, g3, ncol = 3) +
theme(plot.background = element_rect(fill = "#f0f1eb", color = "#f0f1eb")) +
theme(legend.background = element_rect(fill = "#f0f1eb", color = "#f0f1eb"))
#| echo: false
#| eval: true
#| crop: true
#| fig-align: center
#| message: false
grid <- centroids(ga)
grid <- idw(pmmonth$pm25 ~ 1, sf::st_as_sf(pmmonth), newdata = sf::st_as_sf(grid), nmax = 1)
gamonth$idwbetavor <- grid$var1.pred
ggplot() +
geom_spatvector(data = gamonth, aes(fill = idwbetavor), color = NA, show.legend = FALSE) +
scale_fill_distiller("PM 2.5\n(Jan. 2020)", palette = "Spectral") +
theme_bw() +
theme(plot.background = element_rect(fill = "#f0f1eb", color = "#f0f1eb")) +
theme(legend.background = element_rect(fill = "#f0f1eb", color = "#f0f1eb"))
#| echo: false
#| eval: true
#| crop: true
#| fig-align: center
#| message: false
grid <- centroids(ga)
grid2 <- idw(pmmonth$pm25 ~ 1, sf::st_as_sf(pmmonth), newdata = sf::st_as_sf(grid), nmax = 2)
grid3 <- idw(pmmonth$pm25 ~ 1, sf::st_as_sf(pmmonth), newdata = sf::st_as_sf(grid), nmax = 10)
gamonth$idwbetavor2 <- grid2$var1.pred
gamonth$idwbetavor3 <- grid3$var1.pred
g1 <- ggplot() +
geom_spatvector(data = gamonth, aes(fill = idwbetavor), color = NA, show.legend = FALSE) +
scale_fill_distiller("PM 2.5\n(Jan. 2020)", palette = "Spectral") +
labs(subtitle = "Panel A: 1 neighbor") +
theme_bw() +
theme(plot.background = element_rect(fill = "#f0f1eb", color = "#f0f1eb")) +
theme(legend.background = element_rect(fill = "#f0f1eb", color = "#f0f1eb"))
g2 <- ggplot() +
geom_spatvector(data = gamonth, aes(fill = idwbetavor2), color = NA, show.legend = FALSE) +
scale_fill_distiller("PM 2.5\n(Jan. 2020)", palette = "Spectral") +
labs(subtitle = "Panel B: 2 neighbors") +
theme_bw() +
theme(plot.background = element_rect(fill = "#f0f1eb", color = "#f0f1eb")) +
theme(legend.background = element_rect(fill = "#f0f1eb", color = "#f0f1eb"))
g3 <- ggplot() +
geom_spatvector(data = gamonth, aes(fill = idwbetavor3), color = NA, show.legend = FALSE) +
scale_fill_distiller("PM 2.5\n(Jan. 2020)", palette = "Spectral") +
labs(subtitle = "Panel C: 10 neighbors") +
theme_bw() +
theme(plot.background = element_rect(fill = "#f0f1eb", color = "#f0f1eb")) +
theme(legend.background = element_rect(fill = "#f0f1eb", color = "#f0f1eb"))
plot_grid(g1, g2, g3, ncol = 3) +
theme(plot.background = element_rect(fill = "#f0f1eb", color = "#f0f1eb")) +
theme(legend.background = element_rect(fill = "#f0f1eb", color = "#f0f1eb"))
gapov <- read_csv("week8files/GApov.csv")
gapov <- read_csv("week8files/GApov.csv")
head(gapov)
gapov$GEO_ID <- as.character(gapov$GEO_ID)
gapov$poorrate <- gapov$poor/gapov$pop
gapov$poorrateblack <- gapov$poorblack/gapov$popblack
gapov$poorratehispanic <- gapov$poorhispanic/gapov$pophispanic
gamonth <- gamonth |>
left_join(gapov, by = c("GEOID" = "GEO_ID"))
names(gamonth)
cor(gamonth$poorrateblack, gamonth$pm25, use = "complete.obs")
summary(gamonth)
#| label: setup
#| include: false
knitr::knit_hooks$set(crop = knitr::hook_pdfcrop)
Sys.setenv("RETICULATE_PYTHON" = paste0(getwd(), "/classenv/bin/python"))
library(reticulate)
use_virtualenv(paste0(getwd(), "/classenv"), required=TRUE)
library(tidyverse)
library(terra)
library(tidyterra)
library(cowplot)
library(kableExtra)
library(gstat)
library(automap)
kdisgreen <- "#006334"
accent <- "#340063"
accent2 <- "#633400"
kdisgray <- "#A7A9AC"
#| echo: false
#| eval: true
#| crop: true
#| fig-align: center
ga <- vect("week8files/tl_2020_13_tract.shp")
ggplot() +
geom_spatvector(data = ga, lwd = 0.05, fill = NA) +
theme_bw() +
theme(plot.background = element_rect(fill = "#f0f1eb", color = "#f0f1eb")) +
theme(legend.background = element_rect(fill = "#f0f1eb", color = "#f0f1eb"))
#| echo: true
#| eval: true
#| crop: true
#| class-output: .hscroll
pm <- read_csv("week8files/GApm.csv")
summary(pm)
#| echo: true
#| eval: true
#| crop: true
#| class-output: .hscroll
# first, to date
pm$Date[1] # note the format
pm$date <- mdy(pm$Date) # month day year (from the lubridate package, part of tidyverse)
head(pm$date)
class(pm$date)
#| echo: true
#| eval: true
#| crop: true
#| class-output: .hscroll
head(year(pm$date))
head(month(pm$date))
head(day(pm$date))
#| echo: true
#| eval: true
#| crop: true
#| class-output: .hscroll
table(month(pm$date))
#| echo: true
#| eval: true
#| crop: true
#| class-output: .hscroll
colnames(pm)
#| echo: true
#| eval: true
#| crop: true
#| class-output: .hscroll
# note the syntax here!
pm <- pm |>
select(siteid = `Site ID`, date, pm25 = `Daily Mean PM2.5 Concentration`,
AQI = `Daily AQI Value`, lon = `Site Longitude`, lat = `Site Latitude`)
pm
#| echo: true
#| eval: true
#| crop: true
#| class-output: .hscroll
pm <- vect(pm, geom = c("lon", "lat"), crs = "EPSG:4326")
pm
#| echo: false
#| eval: true
#| crop: true
#| fig-align: center
ga <- vect("week8files/tl_2020_13_tract.shp")
# make sure it's the same crs
ga <- project(ga, crs(pm))
ggplot() +
geom_spatvector(data = ga, lwd = 0.05, color = "gray", fill = NA) +
geom_spatvector(data = pm |> filter(month(date)==1), color = "red") +
theme_bw() +
theme(plot.background = element_rect(fill = "#f0f1eb", color = "#f0f1eb")) +
theme(legend.background = element_rect(fill = "#f0f1eb", color = "#f0f1eb"))
#| echo: false
#| eval: true
#| crop: true
#| fig-align: center
# keep one observation per station
pmunique <- pm |>
group_by(siteid) |>
filter(row_number() == 1) |>
ungroup()
voronoiga <- voronoi(pmunique, bnd = ga)
ggplot() +
geom_spatvector(data = ga, lwd = 0.05, color = "gray", fill = NA) +
geom_spatvector(data = voronoiga, lwd = 0.05, color = "blue", fill = NA) +
geom_spatvector(data = pm |> filter(month(date)==1), color = "red") +
theme_bw() +
theme(plot.background = element_rect(fill = "#f0f1eb", color = "#f0f1eb")) +
theme(legend.background = element_rect(fill = "#f0f1eb", color = "#f0f1eb"))
#| echo: true
#| eval: true
#| crop: true
#| fig-align: center
# keep one observation per station
pmmonth <- pm |>
filter(month(date)==1) |>
group_by(siteid) |>
summarize(pm25 = mean(pm25, na.rm = TRUE), .groups = "drop")
#| echo: true
#| eval: true
#| crop: true
#| fig-align: center
# Intersection
vorintersect <- intersect(ga, voronoiga)
# find area
vorintersect$area <- expanse(vorintersect)
# group by GEOID and find largest value
vorintersect <- vorintersect |>
group_by(GEOID) |>
filter(area==max(area)) |>
ungroup() |>
# now keep just the site id and geoid
select(GEOID, siteid) |>
as_tibble()
#| echo: false
#| eval: true
#| crop: true
#| fig-align: center
vorintersect <- vorintersect |>
left_join(as_tibble(pmmonth), by = "siteid")
gamonth <- ga |>
left_join(vorintersect, by = "GEOID")
ggplot() +
geom_spatvector(data = gamonth, aes(fill = pm25), color = NA) +
scale_fill_distiller("PM 2.5\n(Jan. 2020)", palette = "Spectral") +
theme_bw() +
theme(plot.background = element_rect(fill = "#f0f1eb", color = "#f0f1eb")) +
theme(legend.background = element_rect(fill = "#f0f1eb", color = "#f0f1eb"))
#| echo: false
#| eval: true
#| crop: true
#| fig-align: center
# create centroids
gacentroids <- centroids(ga)
#intersect
vorcentroids <- intersect(gacentroids, voronoiga)
# create new gamonth
gamonth <- ga |>
mutate(siteid = vorcentroids$siteid)
gamonth <- gamonth |>
left_join(as_tibble(pmmonth), by = "siteid")
ggplot() +
geom_spatvector(data = gamonth, aes(fill = pm25), color = NA) +
scale_fill_distiller("PM 2.5\n(Jan. 2020)", palette = "Spectral") +
theme_bw() +
theme(plot.background = element_rect(fill = "#f0f1eb", color = "#f0f1eb")) +
theme(legend.background = element_rect(fill = "#f0f1eb", color = "#f0f1eb"))
#| echo: true
#| eval: true
#| crop: true
#| fig-align: center
# new points
grid <- centroids(ga)
# Note: how I convert to sf inside the call!
# Note: idp is the "beta" from above
grid <- idw(pmmonth$pm25 ~ 1, sf::st_as_sf(pmmonth),
newdata = sf::st_as_sf(grid), idp = 1)
grid
#| echo: true
#| eval: true
#| crop: true
#| fig-align: center
gamonth$idwbeta1 <- grid$var1.pred
#| echo: false
#| eval: true
#| crop: true
#| fig-align: center
#| message: false
grid <- centroids(ga)
# Note: how I convert to sf inside the call!
# Note: idp is the "beta" from above
grid2 <- idw(pmmonth$pm25 ~ 1, sf::st_as_sf(pmmonth), newdata = sf::st_as_sf(grid), idp = 2)
gamonth$idwbeta2 <- grid2$var1.pred
# Note: how I convert to sf inside the call!
# Note: idp is the "beta" from above
grid3 <- idw(pmmonth$pm25 ~ 1, sf::st_as_sf(pmmonth), newdata = sf::st_as_sf(grid), idp = 3)
gamonth$idwbeta3 <- grid3$var1.pred
g1 <- ggplot() +
geom_spatvector(data = gamonth, aes(fill = idwbeta1), color = NA, show.legend = FALSE) +
scale_fill_distiller("PM 2.5\n(Jan. 2020)", palette = "Spectral") +
labs(subtitle = expression("Panel A: "~beta~" = 1")) +
theme_bw() +
theme(plot.background = element_rect(fill = "#f0f1eb", color = "#f0f1eb")) +
theme(legend.background = element_rect(fill = "#f0f1eb", color = "#f0f1eb"))
g2 <- ggplot() +
geom_spatvector(data = gamonth, aes(fill = idwbeta2), color = NA, show.legend = FALSE) +
scale_fill_distiller("PM 2.5\n(Jan. 2020)", palette = "Spectral") +
labs(subtitle = expression("Panel B: "~beta~" = 2")) +
theme_bw() +
theme(plot.background = element_rect(fill = "#f0f1eb", color = "#f0f1eb")) +
theme(legend.background = element_rect(fill = "#f0f1eb", color = "#f0f1eb"))
g3 <- ggplot() +
geom_spatvector(data = gamonth, aes(fill = idwbeta3), color = NA, show.legend = FALSE) +
scale_fill_distiller("PM 2.5\n(Jan. 2020)", palette = "Spectral") +
labs(subtitle = expression("Panel C: "~beta~" = 3")) +
theme_bw() +
theme(plot.background = element_rect(fill = "#f0f1eb", color = "#f0f1eb")) +
theme(legend.background = element_rect(fill = "#f0f1eb", color = "#f0f1eb"))
plot_grid(g1, g2, g3, ncol = 3) +
theme(plot.background = element_rect(fill = "#f0f1eb", color = "#f0f1eb")) +
theme(legend.background = element_rect(fill = "#f0f1eb", color = "#f0f1eb"))
#| echo: false
#| eval: true
#| crop: true
#| fig-align: center
#| message: false
grid <- centroids(ga)
grid <- idw(pmmonth$pm25 ~ 1, sf::st_as_sf(pmmonth), newdata = sf::st_as_sf(grid), nmax = 1)
gamonth$idwbetavor <- grid$var1.pred
ggplot() +
geom_spatvector(data = gamonth, aes(fill = idwbetavor), color = NA, show.legend = FALSE) +
scale_fill_distiller("PM 2.5\n(Jan. 2020)", palette = "Spectral") +
theme_bw() +
theme(plot.background = element_rect(fill = "#f0f1eb", color = "#f0f1eb")) +
theme(legend.background = element_rect(fill = "#f0f1eb", color = "#f0f1eb"))
#| echo: false
#| eval: true
#| crop: true
#| fig-align: center
#| message: false
grid <- centroids(ga)
grid2 <- idw(pmmonth$pm25 ~ 1, sf::st_as_sf(pmmonth), newdata = sf::st_as_sf(grid), nmax = 2)
grid3 <- idw(pmmonth$pm25 ~ 1, sf::st_as_sf(pmmonth), newdata = sf::st_as_sf(grid), nmax = 10)
gamonth$idwbetavor2 <- grid2$var1.pred
gamonth$idwbetavor3 <- grid3$var1.pred
g1 <- ggplot() +
geom_spatvector(data = gamonth, aes(fill = idwbetavor), color = NA, show.legend = FALSE) +
scale_fill_distiller("PM 2.5\n(Jan. 2020)", palette = "Spectral") +
labs(subtitle = "Panel A: 1 neighbor") +
theme_bw() +
theme(plot.background = element_rect(fill = "#f0f1eb", color = "#f0f1eb")) +
theme(legend.background = element_rect(fill = "#f0f1eb", color = "#f0f1eb"))
g2 <- ggplot() +
geom_spatvector(data = gamonth, aes(fill = idwbetavor2), color = NA, show.legend = FALSE) +
scale_fill_distiller("PM 2.5\n(Jan. 2020)", palette = "Spectral") +
labs(subtitle = "Panel B: 2 neighbors") +
theme_bw() +
theme(plot.background = element_rect(fill = "#f0f1eb", color = "#f0f1eb")) +
theme(legend.background = element_rect(fill = "#f0f1eb", color = "#f0f1eb"))
g3 <- ggplot() +
geom_spatvector(data = gamonth, aes(fill = idwbetavor3), color = NA, show.legend = FALSE) +
scale_fill_distiller("PM 2.5\n(Jan. 2020)", palette = "Spectral") +
labs(subtitle = "Panel C: 10 neighbors") +
theme_bw() +
theme(plot.background = element_rect(fill = "#f0f1eb", color = "#f0f1eb")) +
theme(legend.background = element_rect(fill = "#f0f1eb", color = "#f0f1eb"))
plot_grid(g1, g2, g3, ncol = 3) +
theme(plot.background = element_rect(fill = "#f0f1eb", color = "#f0f1eb")) +
theme(legend.background = element_rect(fill = "#f0f1eb", color = "#f0f1eb"))
gapov <- read_csv("week8files/GApov.csv")
gapov
gamonth
nrow(gapov)
gapov <- read_csv("week8files/GApov.csv")
gapov
substr(gapov$GEO_ID, 10, str_length(gapov$GEO_ID))
gapov <- read_csv("week8files/GApov.csv")
substr(gapov$GEO_ID, 10, str_length(gapov$GEO_ID))
gapov$GEO_ID <- substr(gapov$GEO_ID, 10, str_length(gapov$GEO_ID))
gapov$GEO_ID <- as.character(gapov$GEO_ID)
gapov$poorrate <- gapov$poor/gapov$pop
gapov$poorratehispanic <- gapov$poorhispanic/gapov$pophispanic
gapov$poorrate <- gapov$poortotal/gapov$poptotal
gapov$poorrateblack <- gapov$poorblack/gapov$popblack
gapov$poorratehispanic <- gapov$poorhispanic/gapov$pophispanic
gamonth <- gamonth |>
left_join(gapov, by = c("GEOID" = "GEO_ID"))
summary(gamonth)
ggplot() +
geom_spatvector(data = gamonth, aes(fill = poorrate), color = NA) +
scale_fill_distiller("Poverty rate", palette = "Spectral") +
theme_bw() +
theme(plot.background = element_rect(fill = "#f0f1eb", color = "#f0f1eb")) +
theme(legend.background = element_rect(fill = "#f0f1eb", color = "#f0f1eb"))
cor(gapov$poorrate, gapov$idwbeta1, use = "complete.obs")
cor(gamonth$poorrate, gamonth$idwbeta1, use = "complete.obs")
cor(gamonth$poorrateblack, gamonth$idwbeta1, use = "complete.obs")
cor(gamonth$poorratehispanic, gamonth$idwbeta1, use = "complete.obs")
gapov <- read_csv("week8files/CApov.csv")
gapov
install.packages("rayshader")
library(rayshader)
g1 <- ggplot() +
geom_spatvector(data = gamonth, aes(fill = poorrate), color = NA) +
scale_fill_distiller("Poverty rate", palette = "Spectral") +
theme_bw() +
theme(plot.background = element_rect(fill = "#f0f1eb", color = "#f0f1eb")) +
theme(legend.background = element_rect(fill = "#f0f1eb", color = "#f0f1eb"))
plot_gg(g1, multicore = TRUE)
if(run_documentation()) {
plot_gg(g1, multicore = TRUE)
render_snapshot()
}
gamonth
names(gamonth)
g1 <- ggplot() +
geom_spatvector(data = gamonth, aes(fill = log(poptotal)), color = NA) +
scale_fill_distiller("Poverty rate", palette = "Spectral") +
theme_bw() +
theme(plot.background = element_rect(fill = "#f0f1eb", color = "#f0f1eb")) +
theme(legend.background = element_rect(fill = "#f0f1eb", color = "#f0f1eb"))
g1 <- ggplot() +
geom_spatvector(data = gamonth, aes(fill = log(poptotal)), color = NA) +
scale_fill_distiller("Population (log)", palette = "Spectral") +
theme_bw() +
theme(plot.background = element_rect(fill = "#f0f1eb", color = "#f0f1eb")) +
theme(legend.background = element_rect(fill = "#f0f1eb", color = "#f0f1eb"))
plot_gg(g1, multicore = TRUE)
g1 <- ggplot() +
geom_spatvector(data = gamonth, aes(fill = log(idwbeta1)), color = NA) +
scale_fill_distiller("PM 2.5 (log)", palette = "Spectral") +
theme_bw() +
theme(plot.background = element_rect(fill = "#f0f1eb", color = "#f0f1eb")) +
theme(legend.background = element_rect(fill = "#f0f1eb", color = "#f0f1eb"))
plot_gg(g1, multicore = TRUE)
plot_gg(g1, multicore = TRUE, theta=-30, phi=30)
plot_gg(g1, multicore = TRUE, theta=-30, phi=30)
plot_gg(g1, multicore = TRUE, phi=30)
plot_gg(g1, multicore = TRUE, theta = 10, phi = 20)
plot_gg(g1, multicore = TRUE, theta = 10, phi = 45)
plot_gg(g1, multicore = TRUE, theta = 10, phi = 45)
plot_gg(g1, multicore = TRUE, theta = 10, phi = 55)
plot_gg(g1, multicore = TRUE, theta = 10, phi = 55, shadow = FALSE)
?plot_gg
render_snapshot(clear = TRUE)
render_snapshot()
