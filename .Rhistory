files <- list.files("../data/resultshhmonth")
results <- mclapply(files, wrapper, mc.cores = 10)
coeftotal <- results |>
lapply(function(x) x[[1]]) |>
bind_rows() |>
as_vector()
coefbetween <- results |>
lapply(function(x) x[[2]]) |>
bind_rows() |>
as_vector()
coefwithin <- results |>
lapply(function(x) x[[3]]) |>
bind_rows() |>
as_vector()
between_pct <- results |>
lapply(function(x) x[[4]]) |>
bind_rows() |>
as_vector()
table <- matrix(NA, nrow = 3, ncol = 4)
colnames(table) <- c("", "Total", "Between", "Within")
table[1,1] <- "Length of roads"
table[2,1] <- "(log)"
table[3,1] <- ""
table[1,2] <- paste0(reportDec(mean(coeftotal)))
table[2,2] <- paste0("(", reportDec(quantile(coeftotal, 0.025)), ", ", reportDec(quantile(coeftotal, 0.975)), ")")
table[3,2] <- paste0("[", reportDec(quantile(coeftotal, 0.05)), ", ", reportDec(quantile(coeftotal, 0.95)), "]")
table[1,3] <- paste0(reportDec(mean(coefbetween)))
table[2,3] <- paste0("(", reportDec(quantile(coefbetween, 0.025)), ", ", reportDec(quantile(coefbetween, 0.975)), ")")
table[3,3] <- paste0("[", reportDec(quantile(coefbetween, 0.05)), ", ", reportDec(quantile(coefbetween, 0.95)), "]")
table[1,4] <- paste0(reportDec(mean(coefwithin)))
table[2,4] <- paste0("(", reportDec(quantile(coefwithin, 0.025)), ", ", reportDec(quantile(coefwithin, 0.975)), ")")
table[3,4] <- paste0("[", reportDec(quantile(coefwithin, 0.05)), ", ", reportDec(quantile(coefwithin, 0.95)), "]")
table
table <- kable(
table, caption = "PMGSY and inequality",
align = "lcc", booktabs = TRUE, linesep = "", row.names = FALSE, format = "latex"
) |>
footnote(
general = "Note: 95-percent confidence intervals are in parentheses and 90-percent confidence intervals are in brackets. The confidence intervals are calculated through a district-level block bootstrap with 500 observations. The point estimate is the mean of the coefficient estimates. Since the treatment variable is continuous, we use a traditional two-way fixed effects model, with fixed effects for districts and years, as well as district-specific time trends.",
general_title = "",
threeparttable = T,
footnote_as_chunk = T
) |>
column_spec(1, width = "3cm") |>
column_spec(2:4,width = "3cm") |>
kable_classic_2()
table <- gsub("item ", "noindent ", table)
save_kable(table, paste0(path, "/pmgsyeffects.tex"))
setwd("~/Dropbox/KDIS/Classes/geospatialdataR")
library(tidyverse)
library(terra)
library(tidyterra)
library(cowplot)
library(kableExtra)
library(haven)
kdisgreen <- "#006334"
accent <- "#340063"
accent2 <- "#633400"
kdisgray <- "#A7A9AC"
getwd()
grids <- vect("assignments/in-class1/data/seoulgrid.shp")
grids
?scale_fill_gradient
g1 <- ggplot(grids) +
geom_spatvector(aes(fill = log(pop))) +
scale_fill_gradient(low = "white", high = kdisgreen, na.value = NA) +
theme_bw()
ggplot(grids) +
geom_spatvector(aes(fill = log(pop))) +
scale_fill_gradient("Pop (log)", low = "white", high = kdisgreen, na.value = NA) +
theme_bw()
df <- read_csv("assignments/in-class1/data/points.csv")
df <- read_csv("assignments/in-class1/data/seoulpoints.csv")
grid
grids
#| echo: true
#| eval: true
# create the object
df <- vect(df, geom = c("lon", "lat"), crs = "EPSG:4326")
# now project it
df <- project(df, crs(grid))
grid
# now project it
df <- project(df, crs(grids))
df
df <- read_csv("assignments/in-class1/data/seoulpoints.csv")
#| echo: true
#| eval: true
# create the object
df <- vect(df, geom = c("lon", "lat"), crs = "EPSG:4326")
df
# now project it
df <- project(df, crs(grids))
df
grids <- grids |>
filter(!is.na(pop))
summary(grids)
df
table(df$fclass)
# create distance matrix for PRIMARY schools
distances <- distance(grids, df |> filter(fclass=="elementaryschool"))
closest <- apply(distance, 1, "min")
closest <- apply(distances, 1, "min")
grids$closest_primary <- closest
summary(grids$closest_primary)
#| echo: false
#| eval: true
#| crop: true
#| fig.align: center
ggplot(grids) +
geom_spatvector(aes(fill = closest_primary), color = NA) +
scale_fill_distiller("Distance\n(m)", palette = "YlOrRd", direction = 1) +
theme_bw() +
theme(plot.background = element_rect(fill = "#f0f1eb", color = "#f0f1eb")) +
theme(legend.background = element_rect(fill = "#f0f1eb", color = "#f0f1eb"))
summary(grids$closest_primary)
#| echo: false
#| eval: true
#| crop: true
#| fig.align: center
ggplot(grids) +
geom_density(closest_primary) +
theme_bw() +
theme(plot.background = element_rect(fill = "#f0f1eb", color = "#f0f1eb")) +
theme(legend.background = element_rect(fill = "#f0f1eb", color = "#f0f1eb"))
#| echo: false
#| eval: true
#| crop: true
#| fig.align: center
ggplot(grids) +
geom_density(aes(x = closest_primary)) +
theme_bw() +
theme(plot.background = element_rect(fill = "#f0f1eb", color = "#f0f1eb")) +
theme(legend.background = element_rect(fill = "#f0f1eb", color = "#f0f1eb"))
totalpop <- sum(grids$pop)
# within 1km
popwithin1km <- sum(grids$pop[grids$closest_primary <= 1000])
# within 2km
popwithin2km <- sum(grids$pop[grids$closest_primary <= 2000])
# within 5km
popwithin5km <- sum(grids$pop[grids$closest_primary <= 5000])
# within 1km
popwithin1km <- sum(grids$pop[grids$closest_primary <= 1000])/totalpop
# within 2km
popwithin2km <- sum(grids$pop[grids$closest_primary <= 2000])/totalpop
# within 5km
popwithin5km <- sum(grids$pop[grids$closest_primary <= 5000])/totalpop
popmat <- matrix(c(popwithin1km, popwithin2km, popwithin5km), nrow = 1)
rownames(popmat) <- "Primary school"
colnames(popmat) <- c("1km", "2km", "5km")
popmat
kable(popmat, digits = 3, row.names = TRUE) %>%
kable_styling("striped", full_width = F) %>%
column_spec(2:4, width = "2cm")
table(df$fclass)
distancesmid <- distance(grids, df |> filter(fclass=="middleschool"))
distancesmid <- apply(distancesmid, 1, "min")
distanceshigh <- distance(grids, df |> filter(fclass=="highschool"))
distanceshigh <- apply(distanceshigh, 1, "min")
# within 1km
popwithin1kmmid <- sum(grids$pop[grids$distancesmid <= 1000])/totalpop
# within 2km
popwithin2kmmid <- sum(grids$pop[grids$distancesmid <= 2000])/totalpop
# within 5km
popwithin5kmmid <- sum(grids$pop[grids$distancesmid <= 5000])/totalpop
popmatmid <- matrix(c(popwithin1kmmid, popwithin2kmmid, popwithin5kmmid), nrow = 1)
rownames(popmatmid) <- "Middle school"
distanceshigh <- distance(grids, df |> filter(fclass=="highschool"))
distanceshigh <- apply(distanceshigh, 1, "min")
# within 1km
popwithin1kmhigh <- sum(grids$pop[grids$distanceshigh <= 1000])/totalpop
# within 2km
popwithin2kmhigh <- sum(grids$pop[grids$distanceshigh <= 2000])/totalpop
# within 5km
popwithin5kmhigh <- sum(grids$pop[grids$distanceshigh <= 5000])/totalpop
popmathigh <- matrix(c(popwithin1kmhigh, popwithin2kmhigh, popwithin5kmhigh), nrow = 1)
rownames(popmathigh) <- "High school"
popmat <- rbind(popmat, popmatmid, popmathigh)
kable(popmat, digits = 3, row.names = TRUE) %>%
kable_styling("striped", full_width = F) %>%
column_spec(2:4, width = "2cm")
distancesmid <- distance(grids, df |> filter(fclass=="middleschool"))
distancesmid
distancesmid <- apply(distancesmid, 1, "min")
distancesmid
summary(distancesmid)
# within 1km
popwithin1kmmid <- sum(grids$pop[distancesmid <= 1000])/totalpop
# within 2km
popwithin2kmmid <- sum(grids$pop[distancesmid <= 2000])/totalpop
# within 5km
popwithin5kmmid <- sum(grids$pop[distancesmid <= 5000])/totalpop
popmatmid <- matrix(c(popwithin1kmmid, popwithin2kmmid, popwithin5kmmid), nrow = 1)
rownames(popmatmid) <- "Middle school"
colnames(popmatmid) <- c("1km", "2km", "5km")
popmatmid
distanceshigh <- distance(grids, df |> filter(fclass=="highschool"))
distanceshigh <- apply(distanceshigh, 1, "min")
# within 1km
popwithin1kmhigh <- sum(grids$pop[distanceshigh <= 1000])/totalpop
# within 2km
popwithin2kmhigh <- sum(grids$pop[distanceshigh <= 2000])/totalpop
# within 5km
popwithin5kmhigh <- sum(grids$pop[distanceshigh <= 5000])/totalpop
popmathigh <- matrix(c(popwithin1kmhigh, popwithin2kmhigh, popwithin5kmhigh), nrow = 1)
rownames(popmathigh) <- "High school"
colnames(popmathigh) <- c("1km", "2km", "5km")
popmathigh
popmat <- rbind(popmat, popmatmid, popmathigh)
kable(popmat, digits = 3, row.names = TRUE) %>%
kable_styling("striped", full_width = F) %>%
column_spec(2:4, width = "2cm")
?kable_styling
kable(popmat, digits = 3, row.names = TRUE, format = "html", table.attr = "style='width:50%;'") %>%
kable_styling("striped", full_width = F) %>%
column_spec(2:4, width = "2cm")
Sys.setenv("RETICULATE_PYTHON" = paste0(getwd(), "/classenv/bin/python"))
library(reticulate)
use_virtualenv(paste0(getwd(), "/classenv"), required=TRUE)
reticulate::repl_python()
df <- read_csv("assignments/in-class1/data/seoulpoints.csv")
head(df)
reticulate::repl_python()
#| label: setup
#| include: false
knitr::knit_hooks$set(crop = knitr::hook_pdfcrop)
Sys.setenv("RETICULATE_PYTHON" = paste0(getwd(), "/classenv/bin/python"))
library(reticulate)
use_virtualenv(paste0(getwd(), "/classenv"), required=TRUE)
library(tidyverse)
library(terra)
library(tidyterra)
library(cowplot)
library(kableExtra)
library(haven)
kdisgreen <- "#006334"
accent <- "#340063"
accent2 <- "#633400"
kdisgray <- "#A7A9AC"
#| echo: true
#| eval: true
lc <- rast("week7files/krlc.tif")
head(lc)
factorvalues <- data.frame(value = 0:7,
class = c("No data", "Shrubs/plants", "Agricultural land", "Urban", "Bare land", "Snow/ice", "Water", "Forest"))
factorvalues
#| echo: true
#| eval: true
lcnew <- lc
lcnew
lcnew$discrete_classification <- case_when(
lcnew$discrete_classification == 0 ~ 0,
lcnew$discrete_classification %in% c(20, 30) ~ 1,
lcnew$discrete_classification == 40 ~ 2,
lcnew$discrete_classification == 50 ~ 3,
lcnew$discrete_classification == 60 ~ 4,
lcnew$discrete_classification == 70 ~ 5,
lcnew$discrete_classification %in% c(80, 200)  ~ 6,
TRUE ~ 7
)
#| echo: true
#| eval: true
lcnew <- as_tibble(lc)
lcnew
lcnew$discrete_classification <- case_when(
lcnew$discrete_classification == 0 ~ 0,
lcnew$discrete_classification %in% c(20, 30) ~ 1,
lcnew$discrete_classification == 40 ~ 2,
lcnew$discrete_classification == 50 ~ 3,
lcnew$discrete_classification == 60 ~ 4,
lcnew$discrete_classification == 70 ~ 5,
lcnew$discrete_classification %in% c(80, 200)  ~ 6,
TRUE ~ 7
)
lcnew
#| echo: true
#| eval: true
# Now replace values
lcfac <- lc
lcfac$discrete_classification <- lcnew$discrete_classification
lcfac
head(lcfac)
lcnew <- lc |>
mutate(discrete_classification = case_when(
lcnew$discrete_classification == 0 ~ 0,
lcnew$discrete_classification %in% c(20, 30) ~ 1,
lcnew$discrete_classification == 40 ~ 2,
lcnew$discrete_classification == 50 ~ 3,
lcnew$discrete_classification == 60 ~ 4,
lcnew$discrete_classification == 70 ~ 5,
lcnew$discrete_classification %in% c(80, 200)  ~ 6,
TRUE ~ 7
))
lcnew <- lc |>
mutate(discrete_classification = case_when(
discrete_classification == 0 ~ 0,
discrete_classification %in% c(20, 30) ~ 1,
discrete_classification == 40 ~ 2,
discrete_classification == 50 ~ 3,
discrete_classification == 60 ~ 4,
discrete_classification == 70 ~ 5,
discrete_classification %in% c(80, 200)  ~ 6,
TRUE ~ 7
))
lcnew
summary(lcnew)
#| echo: true
#| eval: true
rastlevels <- data.frame(id = 0:7,
cover = c("No data", "Shrubs/plants", "Agricultural land", "Urban", "Bare land", "Snow/ice", "Water", "Forest"))
rastlevels
#| echo: true
#| eval: true
rastlevels <- data.frame(id = 0:7,
cls = c("No data", "Shrubs/plants", "Agricultural land", "Urban", "Bare land", "Snow/ice", "Water", "Forest"))
#| echo: true
#| eval: true
cls = c("No data", "Shrubs/plants", "Agricultural land", "Urban", "Bare land", "Snow/ice", "Water", "Forest")
levels(lcnew) <- cls
lcnew
summary(lc)
plot(lcnew)
ggplot() +
geom_spatraster(data = lcnew)
ggplot() +
geom_spatraster(data = lcnew)
ggplot() +
geom_spatraster(data = lcnew, aes(fill = discrete_classification)) +
scale_fill_manual(values = c("white", "green", "yellow", "red", "brown", "blue", "lightblue", "darkgreen")) +
theme_bw()
ggplot() +
geom_spatraster(data = lcnew, aes(fill = discrete_classification)) +
scale_fill_manual(values = c("white", "green", "yellow", "red", "brown", "blue", "lightblue", "darkgreen")) +
theme_bw()
#| echo: true
#| eval: true
lcnew <- lc |>
mutate(discrete_classification = case_when(
discrete_classification == 0 ~ 0,
discrete_classification %in% c(20, 30, 90, 100) ~ 1,
discrete_classification == 40 ~ 2,
discrete_classification == 50 ~ 3,
discrete_classification == 60 ~ 4,
discrete_classification == 70 ~ 5,
discrete_classification %in% c(80, 200)  ~ 6,
TRUE ~ 7
))
#| echo: true
#| eval: true
cls = c("No data", "Shrubs/plants", "Agricultural land", "Urban", "Bare land", "Snow/ice", "Water", "Forest")
levels(lcnew) <- cls
is.factor(lcnew)
lcnew
#| echo: false
#| eval: true
ggplot() +
geom_spatraster(data = lcnew, aes(fill = discrete_classification)) +
scale_fill_manual(values = c("#ffbb22", "#f096ff", "#fa0000", "#b4b4b4", "#f0f0f0", "#0032c8", "#58481f")) +
theme_bw()
#| echo: false
#| eval: true
ggplot() +
geom_spatraster(data = lcnew, aes(fill = discrete_classification)) +
scale_fill_manual(values = c("#ffbb22", "#f096ff", "#fa0000", "#b4b4b4", "#0032c8", "#009900")) +
theme_bw()
#| echo: false
#| eval: true
#| crop: true
ggplot() +
geom_spatraster(data = lcnew, aes(fill = discrete_classification)) +
scale_fill_manual(values = c("#ffbb22", "#f096ff", "#fa0000", "#b4b4b4", "#0032c8", "#009900")) +
theme_bw() +
theme(plot.background = element_rect(fill = "#f0f1eb", color = "#f0f1eb")) +
theme(legend.background = element_rect(fill = "#f0f1eb", color = "#f0f1eb"))
#| echo: false
#| eval: true
#| crop: true
ggplot() +
geom_spatraster(data = lcnew, aes(fill = discrete_classification)) +
scale_fill_manual("Classification", values = c("#ffbb22", "#f096ff", "#fa0000", "#b4b4b4", "#0032c8", "#009900")) +
theme_bw() +
theme(plot.background = element_rect(fill = "#f0f1eb", color = "#f0f1eb")) +
theme(legend.background = element_rect(fill = "#f0f1eb", color = "#f0f1eb"))
#| echo: true
#| eval: true
cls<- data.frame(id = 0:7,
cover = c("No data", "Shrubs/plants", "Agricultural land", "Urban", "Bare land", "Snow/ice", "Water", "Forest"))
levels(lcnew) <- cls
is.factor(lcnew)
lcnew
levels(lcnew)
#| echo: false
#| eval: true
#| crop: true
#| fig.align: center
ggplot() +
geom_spatraster(data = lcnew, aes(fill = discrete_classification)) +
scale_fill_manual("Classification", values = c("#ffbb22", "#f096ff", "#fa0000", "#b4b4b4", "#0032c8", "#009900")) +
theme_bw() +
theme(plot.background = element_rect(fill = "#f0f1eb", color = "#f0f1eb")) +
theme(legend.background = element_rect(fill = "#f0f1eb", color = "#f0f1eb"))
#| echo: false
#| eval: true
#| crop: true
#| fig.align: center
ggplot() +
geom_spatraster(data = lcnew, aes(fill = cover)) +
scale_fill_manual("Classification", values = c("#ffbb22", "#f096ff", "#fa0000", "#b4b4b4", "#0032c8", "#009900")) +
theme_bw() +
theme(plot.background = element_rect(fill = "#f0f1eb", color = "#f0f1eb")) +
theme(legend.background = element_rect(fill = "#f0f1eb", color = "#f0f1eb"))
reticulate::repl_python()
#| echo: true
#| eval: true
lcprop <- read_csv("week7files/lcprop.csv")
head(lcprop)
lcprop
# add "#" to color
lcprop$color <- paste0("#", lcprop$color)
head(lcprop)
lcprop
levels(lcnew) <- lcprop
lcnew
lcnew <- lc
levels(lcnew) <- lcprop[,1:2]
lcnew
reticulate::repl_python()
#| echo: true
#| eval: true
lcprop <- read_csv("week7files/lcprop.csv")
# add "#" to color
lcprop$color <- paste0("#", lcprop$color)
head(lcprop)
head(lcprop)
lcnew <- lc
levels(lcnew) <- lcprop[,1:2]
lcnew
lcnew <- lc
lcnew
summary(lcnew)
data.frame(lcprop[,1:2])
lcnew <- lc
levels(lcnew) <- data.frame(lcprop[,1:2])
lcnew
is.factor(lcnew)
levels(lcnew)
plot(lcnew)
unique(lcnew)
unique(lcnew)$cover
lcprop[lcprop$id==unique(lcnew)$cover,]
#| echo: true
#| eval: true
rasterval <- lcprop[lcprop$id %in% unique(lcnew)$cover,]
rasterval
#| echo: true
#| eval: true
rasterval <- lcprop[lcprop$cover %in% unique(lcnew)$cover,]
rasterval
#| echo: true
#| eval: false
ggplot() +
geom_spatraster(data = lcnew, aes(fill = cover)) +
# Note we need fewer than 8 colors! Only 7 show up in our raster
scale_fill_manual("Classification", values = rasterval$color) +
theme_bw()
#| echo: true
#| eval: false
ggplot() +
geom_spatraster(data = lcnew, aes(fill = cover), show.legend = FALSE) +
# Note we need fewer than 8 colors! Only 7 show up in our raster
scale_fill_manual("Classification", values = rasterval$color) +
theme_bw()
rasterval
lcnew$cover
rasterval$color
rasterval
#| echo: true
#| eval: false
ggplot() +
geom_spatraster(data = lcnew, show.legend = FALSE) +
# Note we need fewer than 8 colors! Only 7 show up in our raster
scale_fill_manual("Classification", values = rasterval$color) +
theme_bw()
unique(lcnew)$cover
#| echo: true
#| eval: true
plot(lcnew)
#| echo: true
#| eval: false
ggplot() +
geom_spatraster(data = lcnew, aes(fill = cover), show.legend = FALSE) +
theme_bw()
lc
names(lc)
reticulate::repl_python()
#| label: setup
#| include: false
knitr::knit_hooks$set(crop = knitr::hook_pdfcrop)
Sys.setenv("RETICULATE_PYTHON" = paste0(getwd(), "/classenv/bin/python"))
library(reticulate)
use_virtualenv(paste0(getwd(), "/classenv"), required=TRUE)
library(tidyverse)
library(terra)
library(tidyterra)
library(cowplot)
library(kableExtra)
library(haven)
kdisgreen <- "#006334"
accent <- "#340063"
accent2 <- "#633400"
kdisgray <- "#A7A9AC"
reticulate::repl_python()
